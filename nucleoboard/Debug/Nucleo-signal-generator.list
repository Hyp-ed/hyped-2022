
Nucleo-signal-generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ec  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080037b8  080037b8  000137b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a0  080039a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039a0  080039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039a8  080039a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  2000000c  080039bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  080039bc  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c4f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000137f  00000000  00000000  00026c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  00028010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000580  00000000  00000000  00028638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002488e  00000000  00000000  00028bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006bfd  00000000  00000000  0004d446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3c61  00000000  00000000  00054043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137ca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c00  00000000  00000000  00137cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800379c 	.word	0x0800379c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800379c 	.word	0x0800379c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b974 	b.w	8000e44 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	468e      	mov	lr, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d14d      	bne.n	8000c1e <__udivmoddi4+0xaa>
 8000b82:	428a      	cmp	r2, r1
 8000b84:	4694      	mov	ip, r2
 8000b86:	d969      	bls.n	8000c5c <__udivmoddi4+0xe8>
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	b152      	cbz	r2, 8000ba4 <__udivmoddi4+0x30>
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	f1c2 0120 	rsb	r1, r2, #32
 8000b96:	fa20 f101 	lsr.w	r1, r0, r1
 8000b9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000ba2:	4094      	lsls	r4, r2
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	0c21      	lsrs	r1, r4, #16
 8000baa:	fbbe f6f8 	udiv	r6, lr, r8
 8000bae:	fa1f f78c 	uxth.w	r7, ip
 8000bb2:	fb08 e316 	mls	r3, r8, r6, lr
 8000bb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bba:	fb06 f107 	mul.w	r1, r6, r7
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x64>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bca:	f080 811f 	bcs.w	8000e0c <__udivmoddi4+0x298>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 811c 	bls.w	8000e0c <__udivmoddi4+0x298>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be0:	fb08 3310 	mls	r3, r8, r0, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb00 f707 	mul.w	r7, r0, r7
 8000bec:	42a7      	cmp	r7, r4
 8000bee:	d90a      	bls.n	8000c06 <__udivmoddi4+0x92>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf8:	f080 810a 	bcs.w	8000e10 <__udivmoddi4+0x29c>
 8000bfc:	42a7      	cmp	r7, r4
 8000bfe:	f240 8107 	bls.w	8000e10 <__udivmoddi4+0x29c>
 8000c02:	4464      	add	r4, ip
 8000c04:	3802      	subs	r0, #2
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	1be4      	subs	r4, r4, r7
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	b11d      	cbz	r5, 8000c18 <__udivmoddi4+0xa4>
 8000c10:	40d4      	lsrs	r4, r2
 8000c12:	2300      	movs	r3, #0
 8000c14:	e9c5 4300 	strd	r4, r3, [r5]
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d909      	bls.n	8000c36 <__udivmoddi4+0xc2>
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	f000 80ef 	beq.w	8000e06 <__udivmoddi4+0x292>
 8000c28:	2600      	movs	r6, #0
 8000c2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c2e:	4630      	mov	r0, r6
 8000c30:	4631      	mov	r1, r6
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	fab3 f683 	clz	r6, r3
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d14a      	bne.n	8000cd4 <__udivmoddi4+0x160>
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xd4>
 8000c42:	4282      	cmp	r2, r0
 8000c44:	f200 80f9 	bhi.w	8000e3a <__udivmoddi4+0x2c6>
 8000c48:	1a84      	subs	r4, r0, r2
 8000c4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	469e      	mov	lr, r3
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	d0e0      	beq.n	8000c18 <__udivmoddi4+0xa4>
 8000c56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c5a:	e7dd      	b.n	8000c18 <__udivmoddi4+0xa4>
 8000c5c:	b902      	cbnz	r2, 8000c60 <__udivmoddi4+0xec>
 8000c5e:	deff      	udf	#255	; 0xff
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f040 8092 	bne.w	8000d8e <__udivmoddi4+0x21a>
 8000c6a:	eba1 010c 	sub.w	r1, r1, ip
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f fe8c 	uxth.w	lr, ip
 8000c76:	2601      	movs	r6, #1
 8000c78:	0c20      	lsrs	r0, r4, #16
 8000c7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c86:	fb0e f003 	mul.w	r0, lr, r3
 8000c8a:	4288      	cmp	r0, r1
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x12c>
 8000c8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x12a>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f200 80cb 	bhi.w	8000e34 <__udivmoddi4+0x2c0>
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	1a09      	subs	r1, r1, r0
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb4:	45a6      	cmp	lr, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x156>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc0:	d202      	bcs.n	8000cc8 <__udivmoddi4+0x154>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f200 80bb 	bhi.w	8000e3e <__udivmoddi4+0x2ca>
 8000cc8:	4608      	mov	r0, r1
 8000cca:	eba4 040e 	sub.w	r4, r4, lr
 8000cce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cd2:	e79c      	b.n	8000c0e <__udivmoddi4+0x9a>
 8000cd4:	f1c6 0720 	rsb	r7, r6, #32
 8000cd8:	40b3      	lsls	r3, r6
 8000cda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ce6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cea:	431c      	orrs	r4, r3
 8000cec:	40f9      	lsrs	r1, r7
 8000cee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cfa:	0c20      	lsrs	r0, r4, #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fb09 1118 	mls	r1, r9, r8, r1
 8000d04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d08:	fb08 f00e 	mul.w	r0, r8, lr
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d12:	d90b      	bls.n	8000d2c <__udivmoddi4+0x1b8>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d1c:	f080 8088 	bcs.w	8000e30 <__udivmoddi4+0x2bc>
 8000d20:	4288      	cmp	r0, r1
 8000d22:	f240 8085 	bls.w	8000e30 <__udivmoddi4+0x2bc>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	4461      	add	r1, ip
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d34:	fb09 1110 	mls	r1, r9, r0, r1
 8000d38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d40:	458e      	cmp	lr, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1e2>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d4c:	d26c      	bcs.n	8000e28 <__udivmoddi4+0x2b4>
 8000d4e:	458e      	cmp	lr, r1
 8000d50:	d96a      	bls.n	8000e28 <__udivmoddi4+0x2b4>
 8000d52:	3802      	subs	r0, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d5e:	eba1 010e 	sub.w	r1, r1, lr
 8000d62:	42a1      	cmp	r1, r4
 8000d64:	46c8      	mov	r8, r9
 8000d66:	46a6      	mov	lr, r4
 8000d68:	d356      	bcc.n	8000e18 <__udivmoddi4+0x2a4>
 8000d6a:	d053      	beq.n	8000e14 <__udivmoddi4+0x2a0>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x212>
 8000d6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d72:	eb61 010e 	sbc.w	r1, r1, lr
 8000d76:	fa01 f707 	lsl.w	r7, r1, r7
 8000d7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d7e:	40f1      	lsrs	r1, r6
 8000d80:	431f      	orrs	r7, r3
 8000d82:	e9c5 7100 	strd	r7, r1, [r5]
 8000d86:	2600      	movs	r6, #0
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	40d8      	lsrs	r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa21 f303 	lsr.w	r3, r1, r3
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	4301      	orrs	r1, r0
 8000da0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dac:	fb07 3610 	mls	r6, r7, r0, r3
 8000db0:	0c0b      	lsrs	r3, r1, #16
 8000db2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000db6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dba:	429e      	cmp	r6, r3
 8000dbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x260>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dca:	d22f      	bcs.n	8000e2c <__udivmoddi4+0x2b8>
 8000dcc:	429e      	cmp	r6, r3
 8000dce:	d92d      	bls.n	8000e2c <__udivmoddi4+0x2b8>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1b9b      	subs	r3, r3, r6
 8000dd6:	b289      	uxth	r1, r1
 8000dd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ddc:	fb07 3316 	mls	r3, r7, r6, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb06 f30e 	mul.w	r3, r6, lr
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x28a>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000df4:	d216      	bcs.n	8000e24 <__udivmoddi4+0x2b0>
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d914      	bls.n	8000e24 <__udivmoddi4+0x2b0>
 8000dfa:	3e02      	subs	r6, #2
 8000dfc:	4461      	add	r1, ip
 8000dfe:	1ac9      	subs	r1, r1, r3
 8000e00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e04:	e738      	b.n	8000c78 <__udivmoddi4+0x104>
 8000e06:	462e      	mov	r6, r5
 8000e08:	4628      	mov	r0, r5
 8000e0a:	e705      	b.n	8000c18 <__udivmoddi4+0xa4>
 8000e0c:	4606      	mov	r6, r0
 8000e0e:	e6e3      	b.n	8000bd8 <__udivmoddi4+0x64>
 8000e10:	4618      	mov	r0, r3
 8000e12:	e6f8      	b.n	8000c06 <__udivmoddi4+0x92>
 8000e14:	454b      	cmp	r3, r9
 8000e16:	d2a9      	bcs.n	8000d6c <__udivmoddi4+0x1f8>
 8000e18:	ebb9 0802 	subs.w	r8, r9, r2
 8000e1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e20:	3801      	subs	r0, #1
 8000e22:	e7a3      	b.n	8000d6c <__udivmoddi4+0x1f8>
 8000e24:	4646      	mov	r6, r8
 8000e26:	e7ea      	b.n	8000dfe <__udivmoddi4+0x28a>
 8000e28:	4620      	mov	r0, r4
 8000e2a:	e794      	b.n	8000d56 <__udivmoddi4+0x1e2>
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	e7d1      	b.n	8000dd4 <__udivmoddi4+0x260>
 8000e30:	46d0      	mov	r8, sl
 8000e32:	e77b      	b.n	8000d2c <__udivmoddi4+0x1b8>
 8000e34:	3b02      	subs	r3, #2
 8000e36:	4461      	add	r1, ip
 8000e38:	e732      	b.n	8000ca0 <__udivmoddi4+0x12c>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e709      	b.n	8000c52 <__udivmoddi4+0xde>
 8000e3e:	4464      	add	r4, ip
 8000e40:	3802      	subs	r0, #2
 8000e42:	e742      	b.n	8000cca <__udivmoddi4+0x156>

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b0e7      	sub	sp, #412	; 0x19c
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4e:	f000 faec 	bl	800142a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e52:	f000 f8b5 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e56:	f000 f96d 	bl	8001134 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000e5a:	f000 f90d 	bl	8001078 <MX_CAN1_Init>
  MX_DAC_Init();
 8000e5e:	f000 f93f 	bl	80010e0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000e62:	2100      	movs	r1, #0
 8000e64:	4850      	ldr	r0, [pc, #320]	; (8000fa8 <main+0x160>)
 8000e66:	f000 fd64 	bl	8001932 <HAL_DAC_Start>
  uint32_t DAC_OUT[100];
  for (int i=0;i<100;i++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000e70:	e041      	b.n	8000ef6 <main+0xae>
  	{
	  DAC_OUT[i] = ((sin(i*2*M_PI/100) + 1)*(4096/2));
 8000e72:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fb17 	bl	80004ac <__aeabi_i2d>
 8000e7e:	a346      	add	r3, pc, #280	; (adr r3, 8000f98 <main+0x150>)
 8000e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e84:	f7ff fb7c 	bl	8000580 <__aeabi_dmul>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	4b45      	ldr	r3, [pc, #276]	; (8000fac <main+0x164>)
 8000e96:	f7ff fc9d 	bl	80007d4 <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	ec43 2b17 	vmov	d7, r2, r3
 8000ea2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ea6:	eef0 0a67 	vmov.f32	s1, s15
 8000eaa:	f001 fc01 	bl	80026b0 <sin>
 8000eae:	ec51 0b10 	vmov	r0, r1, d0
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b3e      	ldr	r3, [pc, #248]	; (8000fb0 <main+0x168>)
 8000eb8:	f7ff f9ac 	bl	8000214 <__adddf3>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <main+0x16c>)
 8000eca:	f7ff fb59 	bl	8000580 <__aeabi_dmul>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f7ff fe15 	bl	8000b04 <__aeabi_d2uiz>
 8000eda:	4601      	mov	r1, r0
 8000edc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000ee0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000ee4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i=0;i<100;i++)
 8000eec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000ef6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000efa:	2b63      	cmp	r3, #99	; 0x63
 8000efc:	ddb9      	ble.n	8000e72 <main+0x2a>
  	}

  uint8_t i = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  DAC1->DHR12R1 = ((sin(i%100*2*M_PI/100) + 1)*(4094/2));
 8000f04:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8000f08:	4a2b      	ldr	r2, [pc, #172]	; (8000fb8 <main+0x170>)
 8000f0a:	fba2 1203 	umull	r1, r2, r2, r3
 8000f0e:	0952      	lsrs	r2, r2, #5
 8000f10:	2164      	movs	r1, #100	; 0x64
 8000f12:	fb01 f202 	mul.w	r2, r1, r2
 8000f16:	1a9b      	subs	r3, r3, r2
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fac5 	bl	80004ac <__aeabi_i2d>
 8000f22:	a31d      	add	r3, pc, #116	; (adr r3, 8000f98 <main+0x150>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	f7ff fb2a 	bl	8000580 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <main+0x164>)
 8000f3a:	f7ff fc4b 	bl	80007d4 <__aeabi_ddiv>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	ec43 2b17 	vmov	d7, r2, r3
 8000f46:	eeb0 0a47 	vmov.f32	s0, s14
 8000f4a:	eef0 0a67 	vmov.f32	s1, s15
 8000f4e:	f001 fbaf 	bl	80026b0 <sin>
 8000f52:	ec51 0b10 	vmov	r0, r1, d0
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <main+0x168>)
 8000f5c:	f7ff f95a 	bl	8000214 <__adddf3>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	a30d      	add	r3, pc, #52	; (adr r3, 8000fa0 <main+0x158>)
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f7ff fb07 	bl	8000580 <__aeabi_dmul>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4c11      	ldr	r4, [pc, #68]	; (8000fbc <main+0x174>)
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fdc2 	bl	8000b04 <__aeabi_d2uiz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	60a3      	str	r3, [r4, #8]
	  i++;
 8000f84:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
	  HAL_Delay(50);
 8000f8e:	2032      	movs	r0, #50	; 0x32
 8000f90:	f000 faa8 	bl	80014e4 <HAL_Delay>
	  DAC1->DHR12R1 = ((sin(i%100*2*M_PI/100) + 1)*(4094/2));
 8000f94:	e7b6      	b.n	8000f04 <main+0xbc>
 8000f96:	bf00      	nop
 8000f98:	54442d18 	.word	0x54442d18
 8000f9c:	400921fb 	.word	0x400921fb
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	409ffc00 	.word	0x409ffc00
 8000fa8:	20000050 	.word	0x20000050
 8000fac:	40590000 	.word	0x40590000
 8000fb0:	3ff00000 	.word	0x3ff00000
 8000fb4:	40a00000 	.word	0x40a00000
 8000fb8:	51eb851f 	.word	0x51eb851f
 8000fbc:	40007400 	.word	0x40007400

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	; 0x50
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	2230      	movs	r2, #48	; 0x30
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fbdc 	bl	800378c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <SystemClock_Config+0xb0>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a21      	ldr	r2, [pc, #132]	; (8001070 <SystemClock_Config+0xb0>)
 8000fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <SystemClock_Config+0xb0>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <SystemClock_Config+0xb4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <SystemClock_Config+0xb4>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <SystemClock_Config+0xb4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001018:	2302      	movs	r3, #2
 800101a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101c:	2301      	movs	r3, #1
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001020:	2310      	movs	r3, #16
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001024:	2300      	movs	r3, #0
 8001026:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fee7 	bl	8001e00 <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001038:	f000 f8c6 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f001 f976 	bl	8002348 <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001062:	f000 f8b1 	bl	80011c8 <Error_Handler>
  }
}
 8001066:	bf00      	nop
 8001068:	3750      	adds	r7, #80	; 0x50
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_CAN1_Init+0x60>)
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <MX_CAN1_Init+0x64>)
 8001080:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_CAN1_Init+0x60>)
 8001084:	2210      	movs	r2, #16
 8001086:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_CAN1_Init+0x60>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_CAN1_Init+0x60>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_CAN1_Init+0x60>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_CAN1_Init+0x60>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_CAN1_Init+0x60>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_CAN1_Init+0x60>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_CAN1_Init+0x60>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_CAN1_Init+0x60>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_CAN1_Init+0x60>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_CAN1_Init+0x60>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_CAN1_Init+0x60>)
 80010c6:	f000 fa31 	bl	800152c <HAL_CAN_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80010d0:	f000 f87a 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000028 	.word	0x20000028
 80010dc:	40006400 	.word	0x40006400

080010e0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_DAC_Init+0x4c>)
 80010f0:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <MX_DAC_Init+0x50>)
 80010f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_DAC_Init+0x4c>)
 80010f6:	f000 fbfa 	bl	80018ee <HAL_DAC_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001100:	f000 f862 	bl	80011c8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001104:	2300      	movs	r3, #0
 8001106:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_DAC_Init+0x4c>)
 8001114:	f000 fc5f 	bl	80019d6 <HAL_DAC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800111e:	f000 f853 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000050 	.word	0x20000050
 8001130:	40007400 	.word	0x40007400

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_GPIO_Init+0x8c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <MX_GPIO_Init+0x8c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_GPIO_Init+0x8c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <MX_GPIO_Init+0x8c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <MX_GPIO_Init+0x8c>)
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_GPIO_Init+0x8c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_GPIO_Init+0x8c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <MX_GPIO_Init+0x8c>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_GPIO_Init+0x8c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	480b      	ldr	r0, [pc, #44]	; (80011c4 <MX_GPIO_Init+0x90>)
 8001198:	f000 fe18 	bl	8001dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4619      	mov	r1, r3
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_GPIO_Init+0x90>)
 80011b4:	f000 fc5e 	bl	8001a74 <HAL_GPIO_Init>

}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020400 	.word	0x40020400

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <Error_Handler+0x8>
	...

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_MspInit+0x44>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <HAL_MspInit+0x44>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_MspInit+0x44>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x44>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x44>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x44>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a25      	ldr	r2, [pc, #148]	; (80012d0 <HAL_CAN_MspInit+0xb4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d144      	bne.n	80012c8 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800123e:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <HAL_CAN_MspInit+0xb8>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <HAL_CAN_MspInit+0xb8>)
 8001244:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <HAL_CAN_MspInit+0xb8>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_CAN_MspInit+0xb8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <HAL_CAN_MspInit+0xb8>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <HAL_CAN_MspInit+0xb8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_CAN_MspInit+0xb8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_CAN_MspInit+0xb8>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_CAN_MspInit+0xb8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PD1     ------> CAN1_TX
    PB8     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = Output_Pin;
 8001286:	2302      	movs	r3, #2
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001296:	2309      	movs	r3, #9
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Output_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <HAL_CAN_MspInit+0xbc>)
 80012a2:	f000 fbe7 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Input_Pin;
 80012a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012b8:	2309      	movs	r3, #9
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Input_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <HAL_CAN_MspInit+0xc0>)
 80012c4:	f000 fbd6 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40006400 	.word	0x40006400
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40020400 	.word	0x40020400

080012e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a15      	ldr	r2, [pc, #84]	; (8001354 <HAL_DAC_MspInit+0x74>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d123      	bne.n	800134a <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_DAC_MspInit+0x78>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a14      	ldr	r2, [pc, #80]	; (8001358 <HAL_DAC_MspInit+0x78>)
 8001308:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_DAC_MspInit+0x78>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_DAC_MspInit+0x78>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_DAC_MspInit+0x78>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_DAC_MspInit+0x78>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001332:	2310      	movs	r3, #16
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_DAC_MspInit+0x7c>)
 8001346:	f000 fb95 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40007400 	.word	0x40007400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 f87a 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001410 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013de:	490e      	ldr	r1, [pc, #56]	; (8001418 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f4:	4c0b      	ldr	r4, [pc, #44]	; (8001424 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001402:	f7ff ffd7 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f002 f99d 	bl	8003744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff fd1d 	bl	8000e48 <main>
  bx  lr    
 800140e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800141c:	080039b0 	.word	0x080039b0
  ldr r2, =_sbss
 8001420:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001424:	20000068 	.word	0x20000068

08001428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>

0800142a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142e:	2003      	movs	r0, #3
 8001430:	f000 fa2a 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001434:	200f      	movs	r0, #15
 8001436:	f000 f805 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143a:	f7ff fecb 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x54>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x58>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fa37 	bl	80018d6 <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f000 fa0d 	bl	800189e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_InitTick+0x5c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	20000008 	.word	0x20000008
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000064 	.word	0x20000064

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000064 	.word	0x20000064

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008

0800152c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e0ed      	b.n	800171a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d102      	bne.n	8001550 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fe66 	bl	800121c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001560:	f7ff ffb4 	bl	80014cc <HAL_GetTick>
 8001564:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001566:	e012      	b.n	800158e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001568:	f7ff ffb0 	bl	80014cc <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b0a      	cmp	r3, #10
 8001574:	d90b      	bls.n	800158e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2205      	movs	r2, #5
 8001586:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0c5      	b.n	800171a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0e5      	beq.n	8001568 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0202 	bic.w	r2, r2, #2
 80015aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ac:	f7ff ff8e 	bl	80014cc <HAL_GetTick>
 80015b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015b2:	e012      	b.n	80015da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015b4:	f7ff ff8a 	bl	80014cc <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b0a      	cmp	r3, #10
 80015c0:	d90b      	bls.n	80015da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2205      	movs	r2, #5
 80015d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e09f      	b.n	800171a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e5      	bne.n	80015b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7e1b      	ldrb	r3, [r3, #24]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d108      	bne.n	8001602 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e007      	b.n	8001612 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7e5b      	ldrb	r3, [r3, #25]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d108      	bne.n	800162c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	e007      	b.n	800163c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800163a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e9b      	ldrb	r3, [r3, #26]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d108      	bne.n	8001656 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0220 	orr.w	r2, r2, #32
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e007      	b.n	8001666 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0220 	bic.w	r2, r2, #32
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7edb      	ldrb	r3, [r3, #27]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d108      	bne.n	8001680 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0210 	bic.w	r2, r2, #16
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e007      	b.n	8001690 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0210 	orr.w	r2, r2, #16
 800168e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7f1b      	ldrb	r3, [r3, #28]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0208 	orr.w	r2, r2, #8
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e007      	b.n	80016ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0208 	bic.w	r2, r2, #8
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7f5b      	ldrb	r3, [r3, #29]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0204 	orr.w	r2, r2, #4
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e007      	b.n	80016e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0204 	bic.w	r2, r2, #4
 80016e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	ea42 0103 	orr.w	r1, r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <__NVIC_SetPriorityGrouping+0x40>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	4313      	orrs	r3, r2
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x40>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00
 8001768:	05fa0000 	.word	0x05fa0000

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	; (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001854:	d301      	bcc.n	800185a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001856:	2301      	movs	r3, #1
 8001858:	e00f      	b.n	800187a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <SysTick_Config+0x40>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001862:	210f      	movs	r1, #15
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f7ff ff8e 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <SysTick_Config+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <SysTick_Config+0x40>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff47 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff5c 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff8e 	bl	80017dc <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5d 	bl	8001788 <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffb0 	bl	8001844 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e014      	b.n	800192a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	791b      	ldrb	r3, [r3, #4]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fce5 	bl	80012e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2202      	movs	r2, #2
 800191a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	795b      	ldrb	r3, [r3, #5]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_DAC_Start+0x16>
 8001944:	2302      	movs	r3, #2
 8001946:	e040      	b.n	80019ca <HAL_DAC_Start+0x98>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2202      	movs	r2, #2
 8001952:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6819      	ldr	r1, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2201      	movs	r2, #1
 8001962:	409a      	lsls	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10f      	bne.n	8001992 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800197c:	2b3c      	cmp	r3, #60	; 0x3c
 800197e:	d11d      	bne.n	80019bc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	e014      	b.n	80019bc <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	213c      	movs	r1, #60	; 0x3c
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d107      	bne.n	80019bc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0202 	orr.w	r2, r2, #2
 80019ba:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b087      	sub	sp, #28
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	795b      	ldrb	r3, [r3, #5]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_DAC_ConfigChannel+0x18>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e03c      	b.n	8001a68 <HAL_DAC_ConfigChannel+0x92>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2201      	movs	r2, #1
 80019f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2202      	movs	r2, #2
 80019f8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4013      	ands	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	22c0      	movs	r2, #192	; 0xc0
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43da      	mvns	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	400a      	ands	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e175      	b.n	8001d80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 8164 	bne.w	8001d7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_GPIO_Init+0x56>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d017      	beq.n	8001b68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d123      	bne.n	8001bbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80be 	beq.w	8001d7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a65      	ldr	r2, [pc, #404]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c16:	4a61      	ldr	r2, [pc, #388]	; (8001d9c <HAL_GPIO_Init+0x328>)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a58      	ldr	r2, [pc, #352]	; (8001da0 <HAL_GPIO_Init+0x32c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d037      	beq.n	8001cb2 <HAL_GPIO_Init+0x23e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a57      	ldr	r2, [pc, #348]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d031      	beq.n	8001cae <HAL_GPIO_Init+0x23a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a56      	ldr	r2, [pc, #344]	; (8001da8 <HAL_GPIO_Init+0x334>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d02b      	beq.n	8001caa <HAL_GPIO_Init+0x236>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a55      	ldr	r2, [pc, #340]	; (8001dac <HAL_GPIO_Init+0x338>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d025      	beq.n	8001ca6 <HAL_GPIO_Init+0x232>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a54      	ldr	r2, [pc, #336]	; (8001db0 <HAL_GPIO_Init+0x33c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01f      	beq.n	8001ca2 <HAL_GPIO_Init+0x22e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a53      	ldr	r2, [pc, #332]	; (8001db4 <HAL_GPIO_Init+0x340>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d019      	beq.n	8001c9e <HAL_GPIO_Init+0x22a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	; (8001db8 <HAL_GPIO_Init+0x344>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0x226>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a51      	ldr	r2, [pc, #324]	; (8001dbc <HAL_GPIO_Init+0x348>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00d      	beq.n	8001c96 <HAL_GPIO_Init+0x222>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a50      	ldr	r2, [pc, #320]	; (8001dc0 <HAL_GPIO_Init+0x34c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x21e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4f      	ldr	r2, [pc, #316]	; (8001dc4 <HAL_GPIO_Init+0x350>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_Init+0x21a>
 8001c8a:	2309      	movs	r3, #9
 8001c8c:	e012      	b.n	8001cb4 <HAL_GPIO_Init+0x240>
 8001c8e:	230a      	movs	r3, #10
 8001c90:	e010      	b.n	8001cb4 <HAL_GPIO_Init+0x240>
 8001c92:	2308      	movs	r3, #8
 8001c94:	e00e      	b.n	8001cb4 <HAL_GPIO_Init+0x240>
 8001c96:	2307      	movs	r3, #7
 8001c98:	e00c      	b.n	8001cb4 <HAL_GPIO_Init+0x240>
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	e00a      	b.n	8001cb4 <HAL_GPIO_Init+0x240>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x240>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x240>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x240>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x240>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x240>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cc4:	4935      	ldr	r1, [pc, #212]	; (8001d9c <HAL_GPIO_Init+0x328>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_GPIO_Init+0x354>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a34      	ldr	r2, [pc, #208]	; (8001dc8 <HAL_GPIO_Init+0x354>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_GPIO_Init+0x354>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a29      	ldr	r2, [pc, #164]	; (8001dc8 <HAL_GPIO_Init+0x354>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d26:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <HAL_GPIO_Init+0x354>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_GPIO_Init+0x354>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_GPIO_Init+0x354>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <HAL_GPIO_Init+0x354>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f ae86 	bls.w	8001a94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40021400 	.word	0x40021400
 8001db8:	40021800 	.word	0x40021800
 8001dbc:	40021c00 	.word	0x40021c00
 8001dc0:	40022000 	.word	0x40022000
 8001dc4:	40022400 	.word	0x40022400
 8001dc8:	40013c00 	.word	0x40013c00

08001dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ddc:	787b      	ldrb	r3, [r7, #1]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001de8:	e003      	b.n	8001df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dea:	887b      	ldrh	r3, [r7, #2]
 8001dec:	041a      	lsls	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	619a      	str	r2, [r3, #24]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e291      	b.n	800233a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8087 	beq.w	8001f32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e24:	4b96      	ldr	r3, [pc, #600]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d00c      	beq.n	8001e4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e30:	4b93      	ldr	r3, [pc, #588]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d112      	bne.n	8001e62 <HAL_RCC_OscConfig+0x62>
 8001e3c:	4b90      	ldr	r3, [pc, #576]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e48:	d10b      	bne.n	8001e62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4a:	4b8d      	ldr	r3, [pc, #564]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d06c      	beq.n	8001f30 <HAL_RCC_OscConfig+0x130>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d168      	bne.n	8001f30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e26b      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x7a>
 8001e6c:	4b84      	ldr	r3, [pc, #528]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a83      	ldr	r2, [pc, #524]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e02e      	b.n	8001ed8 <HAL_RCC_OscConfig+0xd8>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x9c>
 8001e82:	4b7f      	ldr	r3, [pc, #508]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a7e      	ldr	r2, [pc, #504]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b7c      	ldr	r3, [pc, #496]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a7b      	ldr	r2, [pc, #492]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e01d      	b.n	8001ed8 <HAL_RCC_OscConfig+0xd8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xc0>
 8001ea6:	4b76      	ldr	r3, [pc, #472]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a75      	ldr	r2, [pc, #468]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b73      	ldr	r3, [pc, #460]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a72      	ldr	r2, [pc, #456]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0xd8>
 8001ec0:	4b6f      	ldr	r3, [pc, #444]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a6e      	ldr	r2, [pc, #440]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a6b      	ldr	r2, [pc, #428]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff faf4 	bl	80014cc <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff faf0 	bl	80014cc <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e21f      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b61      	ldr	r3, [pc, #388]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xe8>
 8001f06:	e014      	b.n	8001f32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff fae0 	bl	80014cc <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fadc 	bl	80014cc <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e20b      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	4b57      	ldr	r3, [pc, #348]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x110>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d069      	beq.n	8002012 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3e:	4b50      	ldr	r3, [pc, #320]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4a:	4b4d      	ldr	r3, [pc, #308]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d11c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x190>
 8001f56:	4b4a      	ldr	r3, [pc, #296]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_RCC_OscConfig+0x17a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e1df      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	493d      	ldr	r1, [pc, #244]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	e040      	b.n	8002012 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d023      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f98:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a38      	ldr	r2, [pc, #224]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fa92 	bl	80014cc <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fac:	f7ff fa8e 	bl	80014cc <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1bd      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4929      	ldr	r1, [pc, #164]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
 8001fde:	e018      	b.n	8002012 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a26      	ldr	r2, [pc, #152]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff fa6e 	bl	80014cc <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff4:	f7ff fa6a 	bl	80014cc <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e199      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d038      	beq.n	8002090 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d019      	beq.n	800205a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8002028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202a:	4a15      	ldr	r2, [pc, #84]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7ff fa4b 	bl	80014cc <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203a:	f7ff fa47 	bl	80014cc <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e176      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 800204e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x23a>
 8002058:	e01a      	b.n	8002090 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 800205c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205e:	4a08      	ldr	r2, [pc, #32]	; (8002080 <HAL_RCC_OscConfig+0x280>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7ff fa31 	bl	80014cc <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206e:	f7ff fa2d 	bl	80014cc <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d903      	bls.n	8002084 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e15c      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
 8002080:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002084:	4b91      	ldr	r3, [pc, #580]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ee      	bne.n	800206e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a4 	beq.w	80021e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209e:	4b8b      	ldr	r3, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10d      	bne.n	80020c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a87      	ldr	r2, [pc, #540]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b85      	ldr	r3, [pc, #532]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c2:	2301      	movs	r3, #1
 80020c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c6:	4b82      	ldr	r3, [pc, #520]	; (80022d0 <HAL_RCC_OscConfig+0x4d0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x4d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7e      	ldr	r2, [pc, #504]	; (80022d0 <HAL_RCC_OscConfig+0x4d0>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020de:	f7ff f9f5 	bl	80014cc <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e6:	f7ff f9f1 	bl	80014cc <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b64      	cmp	r3, #100	; 0x64
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e120      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f8:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <HAL_RCC_OscConfig+0x4d0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x31a>
 800210c:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	4a6e      	ldr	r2, [pc, #440]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6713      	str	r3, [r2, #112]	; 0x70
 8002118:	e02d      	b.n	8002176 <HAL_RCC_OscConfig+0x376>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x33c>
 8002122:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a69      	ldr	r2, [pc, #420]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a66      	ldr	r2, [pc, #408]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
 800213a:	e01c      	b.n	8002176 <HAL_RCC_OscConfig+0x376>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x35e>
 8002144:	4b61      	ldr	r3, [pc, #388]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4a60      	ldr	r2, [pc, #384]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6713      	str	r3, [r2, #112]	; 0x70
 8002150:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	4a5d      	ldr	r2, [pc, #372]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6713      	str	r3, [r2, #112]	; 0x70
 800215c:	e00b      	b.n	8002176 <HAL_RCC_OscConfig+0x376>
 800215e:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a5a      	ldr	r2, [pc, #360]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a57      	ldr	r2, [pc, #348]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7ff f9a5 	bl	80014cc <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7ff f9a1 	bl	80014cc <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0ce      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ee      	beq.n	8002186 <HAL_RCC_OscConfig+0x386>
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021aa:	f7ff f98f 	bl	80014cc <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7ff f98b 	bl	80014cc <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	4b40      	ldr	r3, [pc, #256]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ee      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b3c      	ldr	r3, [pc, #240]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80a4 	beq.w	8002338 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d06b      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d149      	bne.n	8002298 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a30      	ldr	r2, [pc, #192]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800220a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7ff f95c 	bl	80014cc <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7ff f958 	bl	80014cc <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e087      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222a:	4b28      	ldr	r3, [pc, #160]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	019b      	lsls	r3, r3, #6
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	3b01      	subs	r3, #1
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	061b      	lsls	r3, r3, #24
 800225a:	4313      	orrs	r3, r2
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800225e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002262:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800226a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff f92c 	bl	80014cc <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7ff f928 	bl	80014cc <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e057      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x478>
 8002296:	e04f      	b.n	8002338 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 800229e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a4:	f7ff f912 	bl	80014cc <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7ff f90e 	bl	80014cc <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e03d      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_OscConfig+0x4cc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x4ac>
 80022ca:	e035      	b.n	8002338 <HAL_RCC_OscConfig+0x538>
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x544>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d028      	beq.n	8002334 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d121      	bne.n	8002334 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d11a      	bne.n	8002334 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002304:	4013      	ands	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800230a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800230c:	4293      	cmp	r3, r2
 800230e:	d111      	bne.n	8002334 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	3b01      	subs	r3, #1
 800231e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800

08002348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0d0      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b6a      	ldr	r3, [pc, #424]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d910      	bls.n	8002390 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b67      	ldr	r3, [pc, #412]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 020f 	bic.w	r2, r3, #15
 8002376:	4965      	ldr	r1, [pc, #404]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b63      	ldr	r3, [pc, #396]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0b8      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a8:	4b59      	ldr	r3, [pc, #356]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a58      	ldr	r2, [pc, #352]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c0:	4b53      	ldr	r3, [pc, #332]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4a52      	ldr	r2, [pc, #328]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b50      	ldr	r3, [pc, #320]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	494d      	ldr	r1, [pc, #308]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d040      	beq.n	800246c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d115      	bne.n	800242a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b41      	ldr	r3, [pc, #260]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e073      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b3d      	ldr	r3, [pc, #244]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06b      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242a:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 0203 	bic.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4936      	ldr	r1, [pc, #216]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	4313      	orrs	r3, r2
 800243a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800243c:	f7ff f846 	bl	80014cc <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	e00a      	b.n	800245a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002444:	f7ff f842 	bl	80014cc <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e053      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 020c 	and.w	r2, r3, #12
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1eb      	bne.n	8002444 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d210      	bcs.n	800249c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 020f 	bic.w	r2, r3, #15
 8002482:	4922      	ldr	r1, [pc, #136]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e032      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4916      	ldr	r1, [pc, #88]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	490e      	ldr	r1, [pc, #56]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024da:	f000 f821 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_ClockConfig+0x1c8>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	490a      	ldr	r1, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x1cc>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1d0>)
 80024f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1d4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe ffa2 	bl	8001444 <HAL_InitTick>

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023c00 	.word	0x40023c00
 8002510:	40023800 	.word	0x40023800
 8002514:	080037b8 	.word	0x080037b8
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002524:	b090      	sub	sp, #64	; 0x40
 8002526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	637b      	str	r3, [r7, #52]	; 0x34
 800252c:	2300      	movs	r3, #0
 800252e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002530:	2300      	movs	r3, #0
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002538:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d00d      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x40>
 8002544:	2b08      	cmp	r3, #8
 8002546:	f200 80a1 	bhi.w	800268c <HAL_RCC_GetSysClockFreq+0x16c>
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x34>
 800254e:	2b04      	cmp	r3, #4
 8002550:	d003      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x3a>
 8002552:	e09b      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b53      	ldr	r3, [pc, #332]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002556:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002558:	e09b      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255a:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800255e:	e098      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	4b4f      	ldr	r3, [pc, #316]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800256a:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d028      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	2200      	movs	r2, #0
 800257e:	623b      	str	r3, [r7, #32]
 8002580:	627a      	str	r2, [r7, #36]	; 0x24
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002588:	2100      	movs	r1, #0
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800258c:	fb03 f201 	mul.w	r2, r3, r1
 8002590:	2300      	movs	r3, #0
 8002592:	fb00 f303 	mul.w	r3, r0, r3
 8002596:	4413      	add	r3, r2
 8002598:	4a43      	ldr	r2, [pc, #268]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800259a:	fba0 1202 	umull	r1, r2, r0, r2
 800259e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025a0:	460a      	mov	r2, r1
 80025a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80025a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a6:	4413      	add	r3, r2
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ac:	2200      	movs	r2, #0
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	61fa      	str	r2, [r7, #28]
 80025b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025ba:	f7fe fac3 	bl	8000b44 <__aeabi_uldivmod>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4613      	mov	r3, r2
 80025c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c6:	e053      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c8:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	2200      	movs	r2, #0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	617a      	str	r2, [r7, #20]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025da:	f04f 0b00 	mov.w	fp, #0
 80025de:	4652      	mov	r2, sl
 80025e0:	465b      	mov	r3, fp
 80025e2:	f04f 0000 	mov.w	r0, #0
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	0159      	lsls	r1, r3, #5
 80025ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f0:	0150      	lsls	r0, r2, #5
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	ebb2 080a 	subs.w	r8, r2, sl
 80025fa:	eb63 090b 	sbc.w	r9, r3, fp
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800260a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800260e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002612:	ebb2 0408 	subs.w	r4, r2, r8
 8002616:	eb63 0509 	sbc.w	r5, r3, r9
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	00eb      	lsls	r3, r5, #3
 8002624:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002628:	00e2      	lsls	r2, r4, #3
 800262a:	4614      	mov	r4, r2
 800262c:	461d      	mov	r5, r3
 800262e:	eb14 030a 	adds.w	r3, r4, sl
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	eb45 030b 	adc.w	r3, r5, fp
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002646:	4629      	mov	r1, r5
 8002648:	028b      	lsls	r3, r1, #10
 800264a:	4621      	mov	r1, r4
 800264c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002650:	4621      	mov	r1, r4
 8002652:	028a      	lsls	r2, r1, #10
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265a:	2200      	movs	r2, #0
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	60fa      	str	r2, [r7, #12]
 8002660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002664:	f7fe fa6e 	bl	8000b44 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800268a:	e002      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002694:	4618      	mov	r0, r3
 8002696:	3740      	adds	r7, #64	; 0x40
 8002698:	46bd      	mov	sp, r7
 800269a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	017d7840 	.word	0x017d7840
 80026ac:	00000000 	.word	0x00000000

080026b0 <sin>:
 80026b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80026b2:	ec53 2b10 	vmov	r2, r3, d0
 80026b6:	4828      	ldr	r0, [pc, #160]	; (8002758 <sin+0xa8>)
 80026b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80026bc:	4281      	cmp	r1, r0
 80026be:	dc07      	bgt.n	80026d0 <sin+0x20>
 80026c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8002750 <sin+0xa0>
 80026c4:	2000      	movs	r0, #0
 80026c6:	b005      	add	sp, #20
 80026c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80026cc:	f000 be6c 	b.w	80033a8 <__kernel_sin>
 80026d0:	4822      	ldr	r0, [pc, #136]	; (800275c <sin+0xac>)
 80026d2:	4281      	cmp	r1, r0
 80026d4:	dd09      	ble.n	80026ea <sin+0x3a>
 80026d6:	ee10 0a10 	vmov	r0, s0
 80026da:	4619      	mov	r1, r3
 80026dc:	f7fd fd98 	bl	8000210 <__aeabi_dsub>
 80026e0:	ec41 0b10 	vmov	d0, r0, r1
 80026e4:	b005      	add	sp, #20
 80026e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80026ea:	4668      	mov	r0, sp
 80026ec:	f000 f838 	bl	8002760 <__ieee754_rem_pio2>
 80026f0:	f000 0003 	and.w	r0, r0, #3
 80026f4:	2801      	cmp	r0, #1
 80026f6:	d00c      	beq.n	8002712 <sin+0x62>
 80026f8:	2802      	cmp	r0, #2
 80026fa:	d011      	beq.n	8002720 <sin+0x70>
 80026fc:	b9f0      	cbnz	r0, 800273c <sin+0x8c>
 80026fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002702:	ed9d 0b00 	vldr	d0, [sp]
 8002706:	2001      	movs	r0, #1
 8002708:	f000 fe4e 	bl	80033a8 <__kernel_sin>
 800270c:	ec51 0b10 	vmov	r0, r1, d0
 8002710:	e7e6      	b.n	80026e0 <sin+0x30>
 8002712:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002716:	ed9d 0b00 	vldr	d0, [sp]
 800271a:	f000 fa2d 	bl	8002b78 <__kernel_cos>
 800271e:	e7f5      	b.n	800270c <sin+0x5c>
 8002720:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002724:	ed9d 0b00 	vldr	d0, [sp]
 8002728:	2001      	movs	r0, #1
 800272a:	f000 fe3d 	bl	80033a8 <__kernel_sin>
 800272e:	ec53 2b10 	vmov	r2, r3, d0
 8002732:	ee10 0a10 	vmov	r0, s0
 8002736:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800273a:	e7d1      	b.n	80026e0 <sin+0x30>
 800273c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002740:	ed9d 0b00 	vldr	d0, [sp]
 8002744:	f000 fa18 	bl	8002b78 <__kernel_cos>
 8002748:	e7f1      	b.n	800272e <sin+0x7e>
 800274a:	bf00      	nop
 800274c:	f3af 8000 	nop.w
	...
 8002758:	3fe921fb 	.word	0x3fe921fb
 800275c:	7fefffff 	.word	0x7fefffff

08002760 <__ieee754_rem_pio2>:
 8002760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002764:	ed2d 8b02 	vpush	{d8}
 8002768:	ec55 4b10 	vmov	r4, r5, d0
 800276c:	4bca      	ldr	r3, [pc, #808]	; (8002a98 <__ieee754_rem_pio2+0x338>)
 800276e:	b08b      	sub	sp, #44	; 0x2c
 8002770:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8002774:	4598      	cmp	r8, r3
 8002776:	4682      	mov	sl, r0
 8002778:	9502      	str	r5, [sp, #8]
 800277a:	dc08      	bgt.n	800278e <__ieee754_rem_pio2+0x2e>
 800277c:	2200      	movs	r2, #0
 800277e:	2300      	movs	r3, #0
 8002780:	ed80 0b00 	vstr	d0, [r0]
 8002784:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8002788:	f04f 0b00 	mov.w	fp, #0
 800278c:	e028      	b.n	80027e0 <__ieee754_rem_pio2+0x80>
 800278e:	4bc3      	ldr	r3, [pc, #780]	; (8002a9c <__ieee754_rem_pio2+0x33c>)
 8002790:	4598      	cmp	r8, r3
 8002792:	dc78      	bgt.n	8002886 <__ieee754_rem_pio2+0x126>
 8002794:	9b02      	ldr	r3, [sp, #8]
 8002796:	4ec2      	ldr	r6, [pc, #776]	; (8002aa0 <__ieee754_rem_pio2+0x340>)
 8002798:	2b00      	cmp	r3, #0
 800279a:	ee10 0a10 	vmov	r0, s0
 800279e:	a3b0      	add	r3, pc, #704	; (adr r3, 8002a60 <__ieee754_rem_pio2+0x300>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	4629      	mov	r1, r5
 80027a6:	dd39      	ble.n	800281c <__ieee754_rem_pio2+0xbc>
 80027a8:	f7fd fd32 	bl	8000210 <__aeabi_dsub>
 80027ac:	45b0      	cmp	r8, r6
 80027ae:	4604      	mov	r4, r0
 80027b0:	460d      	mov	r5, r1
 80027b2:	d01b      	beq.n	80027ec <__ieee754_rem_pio2+0x8c>
 80027b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8002a68 <__ieee754_rem_pio2+0x308>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd fd29 	bl	8000210 <__aeabi_dsub>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	e9ca 2300 	strd	r2, r3, [sl]
 80027c6:	4620      	mov	r0, r4
 80027c8:	4629      	mov	r1, r5
 80027ca:	f7fd fd21 	bl	8000210 <__aeabi_dsub>
 80027ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8002a68 <__ieee754_rem_pio2+0x308>)
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	f7fd fd1c 	bl	8000210 <__aeabi_dsub>
 80027d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80027dc:	f04f 0b01 	mov.w	fp, #1
 80027e0:	4658      	mov	r0, fp
 80027e2:	b00b      	add	sp, #44	; 0x2c
 80027e4:	ecbd 8b02 	vpop	{d8}
 80027e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8002a70 <__ieee754_rem_pio2+0x310>)
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	f7fd fd0d 	bl	8000210 <__aeabi_dsub>
 80027f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8002a78 <__ieee754_rem_pio2+0x318>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	4604      	mov	r4, r0
 80027fe:	460d      	mov	r5, r1
 8002800:	f7fd fd06 	bl	8000210 <__aeabi_dsub>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	e9ca 2300 	strd	r2, r3, [sl]
 800280c:	4620      	mov	r0, r4
 800280e:	4629      	mov	r1, r5
 8002810:	f7fd fcfe 	bl	8000210 <__aeabi_dsub>
 8002814:	a398      	add	r3, pc, #608	; (adr r3, 8002a78 <__ieee754_rem_pio2+0x318>)
 8002816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281a:	e7db      	b.n	80027d4 <__ieee754_rem_pio2+0x74>
 800281c:	f7fd fcfa 	bl	8000214 <__adddf3>
 8002820:	45b0      	cmp	r8, r6
 8002822:	4604      	mov	r4, r0
 8002824:	460d      	mov	r5, r1
 8002826:	d016      	beq.n	8002856 <__ieee754_rem_pio2+0xf6>
 8002828:	a38f      	add	r3, pc, #572	; (adr r3, 8002a68 <__ieee754_rem_pio2+0x308>)
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	f7fd fcf1 	bl	8000214 <__adddf3>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	e9ca 2300 	strd	r2, r3, [sl]
 800283a:	4620      	mov	r0, r4
 800283c:	4629      	mov	r1, r5
 800283e:	f7fd fce7 	bl	8000210 <__aeabi_dsub>
 8002842:	a389      	add	r3, pc, #548	; (adr r3, 8002a68 <__ieee754_rem_pio2+0x308>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd fce4 	bl	8000214 <__adddf3>
 800284c:	f04f 3bff 	mov.w	fp, #4294967295
 8002850:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002854:	e7c4      	b.n	80027e0 <__ieee754_rem_pio2+0x80>
 8002856:	a386      	add	r3, pc, #536	; (adr r3, 8002a70 <__ieee754_rem_pio2+0x310>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	f7fd fcda 	bl	8000214 <__adddf3>
 8002860:	a385      	add	r3, pc, #532	; (adr r3, 8002a78 <__ieee754_rem_pio2+0x318>)
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	4604      	mov	r4, r0
 8002868:	460d      	mov	r5, r1
 800286a:	f7fd fcd3 	bl	8000214 <__adddf3>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	e9ca 2300 	strd	r2, r3, [sl]
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f7fd fcc9 	bl	8000210 <__aeabi_dsub>
 800287e:	a37e      	add	r3, pc, #504	; (adr r3, 8002a78 <__ieee754_rem_pio2+0x318>)
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	e7e0      	b.n	8002848 <__ieee754_rem_pio2+0xe8>
 8002886:	4b87      	ldr	r3, [pc, #540]	; (8002aa4 <__ieee754_rem_pio2+0x344>)
 8002888:	4598      	cmp	r8, r3
 800288a:	f300 80d9 	bgt.w	8002a40 <__ieee754_rem_pio2+0x2e0>
 800288e:	f000 fe49 	bl	8003524 <fabs>
 8002892:	ec55 4b10 	vmov	r4, r5, d0
 8002896:	ee10 0a10 	vmov	r0, s0
 800289a:	a379      	add	r3, pc, #484	; (adr r3, 8002a80 <__ieee754_rem_pio2+0x320>)
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	4629      	mov	r1, r5
 80028a2:	f7fd fe6d 	bl	8000580 <__aeabi_dmul>
 80028a6:	4b80      	ldr	r3, [pc, #512]	; (8002aa8 <__ieee754_rem_pio2+0x348>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	f7fd fcb3 	bl	8000214 <__adddf3>
 80028ae:	f7fe f901 	bl	8000ab4 <__aeabi_d2iz>
 80028b2:	4683      	mov	fp, r0
 80028b4:	f7fd fdfa 	bl	80004ac <__aeabi_i2d>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	ec43 2b18 	vmov	d8, r2, r3
 80028c0:	a367      	add	r3, pc, #412	; (adr r3, 8002a60 <__ieee754_rem_pio2+0x300>)
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	f7fd fe5b 	bl	8000580 <__aeabi_dmul>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4620      	mov	r0, r4
 80028d0:	4629      	mov	r1, r5
 80028d2:	f7fd fc9d 	bl	8000210 <__aeabi_dsub>
 80028d6:	a364      	add	r3, pc, #400	; (adr r3, 8002a68 <__ieee754_rem_pio2+0x308>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	4606      	mov	r6, r0
 80028de:	460f      	mov	r7, r1
 80028e0:	ec51 0b18 	vmov	r0, r1, d8
 80028e4:	f7fd fe4c 	bl	8000580 <__aeabi_dmul>
 80028e8:	f1bb 0f1f 	cmp.w	fp, #31
 80028ec:	4604      	mov	r4, r0
 80028ee:	460d      	mov	r5, r1
 80028f0:	dc0d      	bgt.n	800290e <__ieee754_rem_pio2+0x1ae>
 80028f2:	4b6e      	ldr	r3, [pc, #440]	; (8002aac <__ieee754_rem_pio2+0x34c>)
 80028f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80028f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fc:	4543      	cmp	r3, r8
 80028fe:	d006      	beq.n	800290e <__ieee754_rem_pio2+0x1ae>
 8002900:	4622      	mov	r2, r4
 8002902:	462b      	mov	r3, r5
 8002904:	4630      	mov	r0, r6
 8002906:	4639      	mov	r1, r7
 8002908:	f7fd fc82 	bl	8000210 <__aeabi_dsub>
 800290c:	e00f      	b.n	800292e <__ieee754_rem_pio2+0x1ce>
 800290e:	462b      	mov	r3, r5
 8002910:	4622      	mov	r2, r4
 8002912:	4630      	mov	r0, r6
 8002914:	4639      	mov	r1, r7
 8002916:	f7fd fc7b 	bl	8000210 <__aeabi_dsub>
 800291a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800291e:	9303      	str	r3, [sp, #12]
 8002920:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002924:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8002928:	f1b8 0f10 	cmp.w	r8, #16
 800292c:	dc02      	bgt.n	8002934 <__ieee754_rem_pio2+0x1d4>
 800292e:	e9ca 0100 	strd	r0, r1, [sl]
 8002932:	e039      	b.n	80029a8 <__ieee754_rem_pio2+0x248>
 8002934:	a34e      	add	r3, pc, #312	; (adr r3, 8002a70 <__ieee754_rem_pio2+0x310>)
 8002936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293a:	ec51 0b18 	vmov	r0, r1, d8
 800293e:	f7fd fe1f 	bl	8000580 <__aeabi_dmul>
 8002942:	4604      	mov	r4, r0
 8002944:	460d      	mov	r5, r1
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4630      	mov	r0, r6
 800294c:	4639      	mov	r1, r7
 800294e:	f7fd fc5f 	bl	8000210 <__aeabi_dsub>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4680      	mov	r8, r0
 8002958:	4689      	mov	r9, r1
 800295a:	4630      	mov	r0, r6
 800295c:	4639      	mov	r1, r7
 800295e:	f7fd fc57 	bl	8000210 <__aeabi_dsub>
 8002962:	4622      	mov	r2, r4
 8002964:	462b      	mov	r3, r5
 8002966:	f7fd fc53 	bl	8000210 <__aeabi_dsub>
 800296a:	a343      	add	r3, pc, #268	; (adr r3, 8002a78 <__ieee754_rem_pio2+0x318>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	4604      	mov	r4, r0
 8002972:	460d      	mov	r5, r1
 8002974:	ec51 0b18 	vmov	r0, r1, d8
 8002978:	f7fd fe02 	bl	8000580 <__aeabi_dmul>
 800297c:	4622      	mov	r2, r4
 800297e:	462b      	mov	r3, r5
 8002980:	f7fd fc46 	bl	8000210 <__aeabi_dsub>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4604      	mov	r4, r0
 800298a:	460d      	mov	r5, r1
 800298c:	4640      	mov	r0, r8
 800298e:	4649      	mov	r1, r9
 8002990:	f7fd fc3e 	bl	8000210 <__aeabi_dsub>
 8002994:	9a03      	ldr	r2, [sp, #12]
 8002996:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b31      	cmp	r3, #49	; 0x31
 800299e:	dc24      	bgt.n	80029ea <__ieee754_rem_pio2+0x28a>
 80029a0:	e9ca 0100 	strd	r0, r1, [sl]
 80029a4:	4646      	mov	r6, r8
 80029a6:	464f      	mov	r7, r9
 80029a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80029ac:	4630      	mov	r0, r6
 80029ae:	4642      	mov	r2, r8
 80029b0:	464b      	mov	r3, r9
 80029b2:	4639      	mov	r1, r7
 80029b4:	f7fd fc2c 	bl	8000210 <__aeabi_dsub>
 80029b8:	462b      	mov	r3, r5
 80029ba:	4622      	mov	r2, r4
 80029bc:	f7fd fc28 	bl	8000210 <__aeabi_dsub>
 80029c0:	9b02      	ldr	r3, [sp, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80029c8:	f6bf af0a 	bge.w	80027e0 <__ieee754_rem_pio2+0x80>
 80029cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80029d0:	f8ca 3004 	str.w	r3, [sl, #4]
 80029d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80029d8:	f8ca 8000 	str.w	r8, [sl]
 80029dc:	f8ca 0008 	str.w	r0, [sl, #8]
 80029e0:	f8ca 300c 	str.w	r3, [sl, #12]
 80029e4:	f1cb 0b00 	rsb	fp, fp, #0
 80029e8:	e6fa      	b.n	80027e0 <__ieee754_rem_pio2+0x80>
 80029ea:	a327      	add	r3, pc, #156	; (adr r3, 8002a88 <__ieee754_rem_pio2+0x328>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	ec51 0b18 	vmov	r0, r1, d8
 80029f4:	f7fd fdc4 	bl	8000580 <__aeabi_dmul>
 80029f8:	4604      	mov	r4, r0
 80029fa:	460d      	mov	r5, r1
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4640      	mov	r0, r8
 8002a02:	4649      	mov	r1, r9
 8002a04:	f7fd fc04 	bl	8000210 <__aeabi_dsub>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4606      	mov	r6, r0
 8002a0e:	460f      	mov	r7, r1
 8002a10:	4640      	mov	r0, r8
 8002a12:	4649      	mov	r1, r9
 8002a14:	f7fd fbfc 	bl	8000210 <__aeabi_dsub>
 8002a18:	4622      	mov	r2, r4
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	f7fd fbf8 	bl	8000210 <__aeabi_dsub>
 8002a20:	a31b      	add	r3, pc, #108	; (adr r3, 8002a90 <__ieee754_rem_pio2+0x330>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	4604      	mov	r4, r0
 8002a28:	460d      	mov	r5, r1
 8002a2a:	ec51 0b18 	vmov	r0, r1, d8
 8002a2e:	f7fd fda7 	bl	8000580 <__aeabi_dmul>
 8002a32:	4622      	mov	r2, r4
 8002a34:	462b      	mov	r3, r5
 8002a36:	f7fd fbeb 	bl	8000210 <__aeabi_dsub>
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	460d      	mov	r5, r1
 8002a3e:	e75f      	b.n	8002900 <__ieee754_rem_pio2+0x1a0>
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <__ieee754_rem_pio2+0x350>)
 8002a42:	4598      	cmp	r8, r3
 8002a44:	dd36      	ble.n	8002ab4 <__ieee754_rem_pio2+0x354>
 8002a46:	ee10 2a10 	vmov	r2, s0
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	4629      	mov	r1, r5
 8002a50:	f7fd fbde 	bl	8000210 <__aeabi_dsub>
 8002a54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002a58:	e9ca 0100 	strd	r0, r1, [sl]
 8002a5c:	e694      	b.n	8002788 <__ieee754_rem_pio2+0x28>
 8002a5e:	bf00      	nop
 8002a60:	54400000 	.word	0x54400000
 8002a64:	3ff921fb 	.word	0x3ff921fb
 8002a68:	1a626331 	.word	0x1a626331
 8002a6c:	3dd0b461 	.word	0x3dd0b461
 8002a70:	1a600000 	.word	0x1a600000
 8002a74:	3dd0b461 	.word	0x3dd0b461
 8002a78:	2e037073 	.word	0x2e037073
 8002a7c:	3ba3198a 	.word	0x3ba3198a
 8002a80:	6dc9c883 	.word	0x6dc9c883
 8002a84:	3fe45f30 	.word	0x3fe45f30
 8002a88:	2e000000 	.word	0x2e000000
 8002a8c:	3ba3198a 	.word	0x3ba3198a
 8002a90:	252049c1 	.word	0x252049c1
 8002a94:	397b839a 	.word	0x397b839a
 8002a98:	3fe921fb 	.word	0x3fe921fb
 8002a9c:	4002d97b 	.word	0x4002d97b
 8002aa0:	3ff921fb 	.word	0x3ff921fb
 8002aa4:	413921fb 	.word	0x413921fb
 8002aa8:	3fe00000 	.word	0x3fe00000
 8002aac:	080037c8 	.word	0x080037c8
 8002ab0:	7fefffff 	.word	0x7fefffff
 8002ab4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8002ab8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8002abc:	ee10 0a10 	vmov	r0, s0
 8002ac0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8002ac4:	ee10 6a10 	vmov	r6, s0
 8002ac8:	460f      	mov	r7, r1
 8002aca:	f7fd fff3 	bl	8000ab4 <__aeabi_d2iz>
 8002ace:	f7fd fced 	bl	80004ac <__aeabi_i2d>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4630      	mov	r0, r6
 8002ad8:	4639      	mov	r1, r7
 8002ada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ade:	f7fd fb97 	bl	8000210 <__aeabi_dsub>
 8002ae2:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <__ieee754_rem_pio2+0x410>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f7fd fd4b 	bl	8000580 <__aeabi_dmul>
 8002aea:	460f      	mov	r7, r1
 8002aec:	4606      	mov	r6, r0
 8002aee:	f7fd ffe1 	bl	8000ab4 <__aeabi_d2iz>
 8002af2:	f7fd fcdb 	bl	80004ac <__aeabi_i2d>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4630      	mov	r0, r6
 8002afc:	4639      	mov	r1, r7
 8002afe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002b02:	f7fd fb85 	bl	8000210 <__aeabi_dsub>
 8002b06:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <__ieee754_rem_pio2+0x410>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f7fd fd39 	bl	8000580 <__aeabi_dmul>
 8002b0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002b12:	ad04      	add	r5, sp, #16
 8002b14:	f04f 0803 	mov.w	r8, #3
 8002b18:	46a9      	mov	r9, r5
 8002b1a:	2600      	movs	r6, #0
 8002b1c:	2700      	movs	r7, #0
 8002b1e:	4632      	mov	r2, r6
 8002b20:	463b      	mov	r3, r7
 8002b22:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8002b26:	46c3      	mov	fp, r8
 8002b28:	3d08      	subs	r5, #8
 8002b2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8002b2e:	f7fd ff8f 	bl	8000a50 <__aeabi_dcmpeq>
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d1f3      	bne.n	8002b1e <__ieee754_rem_pio2+0x3be>
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <__ieee754_rem_pio2+0x414>)
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	4622      	mov	r2, r4
 8002b40:	465b      	mov	r3, fp
 8002b42:	4651      	mov	r1, sl
 8002b44:	4648      	mov	r0, r9
 8002b46:	f000 f8df 	bl	8002d08 <__kernel_rem_pio2>
 8002b4a:	9b02      	ldr	r3, [sp, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	4683      	mov	fp, r0
 8002b50:	f6bf ae46 	bge.w	80027e0 <__ieee754_rem_pio2+0x80>
 8002b54:	e9da 2100 	ldrd	r2, r1, [sl]
 8002b58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002b5c:	e9ca 2300 	strd	r2, r3, [sl]
 8002b60:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8002b64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002b68:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8002b6c:	e73a      	b.n	80029e4 <__ieee754_rem_pio2+0x284>
 8002b6e:	bf00      	nop
 8002b70:	41700000 	.word	0x41700000
 8002b74:	08003848 	.word	0x08003848

08002b78 <__kernel_cos>:
 8002b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7c:	ec57 6b10 	vmov	r6, r7, d0
 8002b80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8002b84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8002b88:	ed8d 1b00 	vstr	d1, [sp]
 8002b8c:	da07      	bge.n	8002b9e <__kernel_cos+0x26>
 8002b8e:	ee10 0a10 	vmov	r0, s0
 8002b92:	4639      	mov	r1, r7
 8002b94:	f7fd ff8e 	bl	8000ab4 <__aeabi_d2iz>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	f000 8088 	beq.w	8002cae <__kernel_cos+0x136>
 8002b9e:	4632      	mov	r2, r6
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	4630      	mov	r0, r6
 8002ba4:	4639      	mov	r1, r7
 8002ba6:	f7fd fceb 	bl	8000580 <__aeabi_dmul>
 8002baa:	4b51      	ldr	r3, [pc, #324]	; (8002cf0 <__kernel_cos+0x178>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	4604      	mov	r4, r0
 8002bb0:	460d      	mov	r5, r1
 8002bb2:	f7fd fce5 	bl	8000580 <__aeabi_dmul>
 8002bb6:	a340      	add	r3, pc, #256	; (adr r3, 8002cb8 <__kernel_cos+0x140>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	4682      	mov	sl, r0
 8002bbe:	468b      	mov	fp, r1
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	f7fd fcdc 	bl	8000580 <__aeabi_dmul>
 8002bc8:	a33d      	add	r3, pc, #244	; (adr r3, 8002cc0 <__kernel_cos+0x148>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	f7fd fb21 	bl	8000214 <__adddf3>
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	f7fd fcd3 	bl	8000580 <__aeabi_dmul>
 8002bda:	a33b      	add	r3, pc, #236	; (adr r3, 8002cc8 <__kernel_cos+0x150>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd fb16 	bl	8000210 <__aeabi_dsub>
 8002be4:	4622      	mov	r2, r4
 8002be6:	462b      	mov	r3, r5
 8002be8:	f7fd fcca 	bl	8000580 <__aeabi_dmul>
 8002bec:	a338      	add	r3, pc, #224	; (adr r3, 8002cd0 <__kernel_cos+0x158>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	f7fd fb0f 	bl	8000214 <__adddf3>
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	f7fd fcc1 	bl	8000580 <__aeabi_dmul>
 8002bfe:	a336      	add	r3, pc, #216	; (adr r3, 8002cd8 <__kernel_cos+0x160>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd fb04 	bl	8000210 <__aeabi_dsub>
 8002c08:	4622      	mov	r2, r4
 8002c0a:	462b      	mov	r3, r5
 8002c0c:	f7fd fcb8 	bl	8000580 <__aeabi_dmul>
 8002c10:	a333      	add	r3, pc, #204	; (adr r3, 8002ce0 <__kernel_cos+0x168>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f7fd fafd 	bl	8000214 <__adddf3>
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	f7fd fcaf 	bl	8000580 <__aeabi_dmul>
 8002c22:	4622      	mov	r2, r4
 8002c24:	462b      	mov	r3, r5
 8002c26:	f7fd fcab 	bl	8000580 <__aeabi_dmul>
 8002c2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c2e:	4604      	mov	r4, r0
 8002c30:	460d      	mov	r5, r1
 8002c32:	4630      	mov	r0, r6
 8002c34:	4639      	mov	r1, r7
 8002c36:	f7fd fca3 	bl	8000580 <__aeabi_dmul>
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4629      	mov	r1, r5
 8002c40:	4620      	mov	r0, r4
 8002c42:	f7fd fae5 	bl	8000210 <__aeabi_dsub>
 8002c46:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <__kernel_cos+0x17c>)
 8002c48:	4598      	cmp	r8, r3
 8002c4a:	4606      	mov	r6, r0
 8002c4c:	460f      	mov	r7, r1
 8002c4e:	dc10      	bgt.n	8002c72 <__kernel_cos+0xfa>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4650      	mov	r0, sl
 8002c56:	4659      	mov	r1, fp
 8002c58:	f7fd fada 	bl	8000210 <__aeabi_dsub>
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4926      	ldr	r1, [pc, #152]	; (8002cf8 <__kernel_cos+0x180>)
 8002c60:	4602      	mov	r2, r0
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7fd fad4 	bl	8000210 <__aeabi_dsub>
 8002c68:	ec41 0b10 	vmov	d0, r0, r1
 8002c6c:	b003      	add	sp, #12
 8002c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <__kernel_cos+0x184>)
 8002c74:	4920      	ldr	r1, [pc, #128]	; (8002cf8 <__kernel_cos+0x180>)
 8002c76:	4598      	cmp	r8, r3
 8002c78:	bfcc      	ite	gt
 8002c7a:	4d21      	ldrgt	r5, [pc, #132]	; (8002d00 <__kernel_cos+0x188>)
 8002c7c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8002c80:	2400      	movs	r4, #0
 8002c82:	4622      	mov	r2, r4
 8002c84:	462b      	mov	r3, r5
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7fd fac2 	bl	8000210 <__aeabi_dsub>
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	4680      	mov	r8, r0
 8002c90:	4689      	mov	r9, r1
 8002c92:	462b      	mov	r3, r5
 8002c94:	4650      	mov	r0, sl
 8002c96:	4659      	mov	r1, fp
 8002c98:	f7fd faba 	bl	8000210 <__aeabi_dsub>
 8002c9c:	4632      	mov	r2, r6
 8002c9e:	463b      	mov	r3, r7
 8002ca0:	f7fd fab6 	bl	8000210 <__aeabi_dsub>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4640      	mov	r0, r8
 8002caa:	4649      	mov	r1, r9
 8002cac:	e7da      	b.n	8002c64 <__kernel_cos+0xec>
 8002cae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002ce8 <__kernel_cos+0x170>
 8002cb2:	e7db      	b.n	8002c6c <__kernel_cos+0xf4>
 8002cb4:	f3af 8000 	nop.w
 8002cb8:	be8838d4 	.word	0xbe8838d4
 8002cbc:	bda8fae9 	.word	0xbda8fae9
 8002cc0:	bdb4b1c4 	.word	0xbdb4b1c4
 8002cc4:	3e21ee9e 	.word	0x3e21ee9e
 8002cc8:	809c52ad 	.word	0x809c52ad
 8002ccc:	3e927e4f 	.word	0x3e927e4f
 8002cd0:	19cb1590 	.word	0x19cb1590
 8002cd4:	3efa01a0 	.word	0x3efa01a0
 8002cd8:	16c15177 	.word	0x16c15177
 8002cdc:	3f56c16c 	.word	0x3f56c16c
 8002ce0:	5555554c 	.word	0x5555554c
 8002ce4:	3fa55555 	.word	0x3fa55555
 8002ce8:	00000000 	.word	0x00000000
 8002cec:	3ff00000 	.word	0x3ff00000
 8002cf0:	3fe00000 	.word	0x3fe00000
 8002cf4:	3fd33332 	.word	0x3fd33332
 8002cf8:	3ff00000 	.word	0x3ff00000
 8002cfc:	3fe90000 	.word	0x3fe90000
 8002d00:	3fd20000 	.word	0x3fd20000
 8002d04:	00000000 	.word	0x00000000

08002d08 <__kernel_rem_pio2>:
 8002d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d0c:	ed2d 8b02 	vpush	{d8}
 8002d10:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8002d14:	f112 0f14 	cmn.w	r2, #20
 8002d18:	9308      	str	r3, [sp, #32]
 8002d1a:	9101      	str	r1, [sp, #4]
 8002d1c:	4bc4      	ldr	r3, [pc, #784]	; (8003030 <__kernel_rem_pio2+0x328>)
 8002d1e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8002d20:	900b      	str	r0, [sp, #44]	; 0x2c
 8002d22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d26:	9302      	str	r3, [sp, #8]
 8002d28:	9b08      	ldr	r3, [sp, #32]
 8002d2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8002d2e:	bfa8      	it	ge
 8002d30:	1ed4      	subge	r4, r2, #3
 8002d32:	9306      	str	r3, [sp, #24]
 8002d34:	bfb2      	itee	lt
 8002d36:	2400      	movlt	r4, #0
 8002d38:	2318      	movge	r3, #24
 8002d3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8002d3e:	f06f 0317 	mvn.w	r3, #23
 8002d42:	fb04 3303 	mla	r3, r4, r3, r3
 8002d46:	eb03 0a02 	add.w	sl, r3, r2
 8002d4a:	9b02      	ldr	r3, [sp, #8]
 8002d4c:	9a06      	ldr	r2, [sp, #24]
 8002d4e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8003020 <__kernel_rem_pio2+0x318>
 8002d52:	eb03 0802 	add.w	r8, r3, r2
 8002d56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8002d58:	1aa7      	subs	r7, r4, r2
 8002d5a:	ae22      	add	r6, sp, #136	; 0x88
 8002d5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002d60:	2500      	movs	r5, #0
 8002d62:	4545      	cmp	r5, r8
 8002d64:	dd13      	ble.n	8002d8e <__kernel_rem_pio2+0x86>
 8002d66:	9b08      	ldr	r3, [sp, #32]
 8002d68:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8003020 <__kernel_rem_pio2+0x318>
 8002d6c:	aa22      	add	r2, sp, #136	; 0x88
 8002d6e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8002d72:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8002d76:	f04f 0800 	mov.w	r8, #0
 8002d7a:	9b02      	ldr	r3, [sp, #8]
 8002d7c:	4598      	cmp	r8, r3
 8002d7e:	dc2f      	bgt.n	8002de0 <__kernel_rem_pio2+0xd8>
 8002d80:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002d84:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8002d88:	462f      	mov	r7, r5
 8002d8a:	2600      	movs	r6, #0
 8002d8c:	e01b      	b.n	8002dc6 <__kernel_rem_pio2+0xbe>
 8002d8e:	42ef      	cmn	r7, r5
 8002d90:	d407      	bmi.n	8002da2 <__kernel_rem_pio2+0x9a>
 8002d92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002d96:	f7fd fb89 	bl	80004ac <__aeabi_i2d>
 8002d9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002d9e:	3501      	adds	r5, #1
 8002da0:	e7df      	b.n	8002d62 <__kernel_rem_pio2+0x5a>
 8002da2:	ec51 0b18 	vmov	r0, r1, d8
 8002da6:	e7f8      	b.n	8002d9a <__kernel_rem_pio2+0x92>
 8002da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8002db0:	f7fd fbe6 	bl	8000580 <__aeabi_dmul>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002dbc:	f7fd fa2a 	bl	8000214 <__adddf3>
 8002dc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002dc4:	3601      	adds	r6, #1
 8002dc6:	9b06      	ldr	r3, [sp, #24]
 8002dc8:	429e      	cmp	r6, r3
 8002dca:	f1a7 0708 	sub.w	r7, r7, #8
 8002dce:	ddeb      	ble.n	8002da8 <__kernel_rem_pio2+0xa0>
 8002dd0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8002dd4:	f108 0801 	add.w	r8, r8, #1
 8002dd8:	ecab 7b02 	vstmia	fp!, {d7}
 8002ddc:	3508      	adds	r5, #8
 8002dde:	e7cc      	b.n	8002d7a <__kernel_rem_pio2+0x72>
 8002de0:	9b02      	ldr	r3, [sp, #8]
 8002de2:	aa0e      	add	r2, sp, #56	; 0x38
 8002de4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002de8:	930d      	str	r3, [sp, #52]	; 0x34
 8002dea:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8002dec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002df0:	9c02      	ldr	r4, [sp, #8]
 8002df2:	930c      	str	r3, [sp, #48]	; 0x30
 8002df4:	00e3      	lsls	r3, r4, #3
 8002df6:	930a      	str	r3, [sp, #40]	; 0x28
 8002df8:	ab9a      	add	r3, sp, #616	; 0x268
 8002dfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002dfe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8002e02:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8002e06:	ab72      	add	r3, sp, #456	; 0x1c8
 8002e08:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8002e0c:	46c3      	mov	fp, r8
 8002e0e:	46a1      	mov	r9, r4
 8002e10:	f1b9 0f00 	cmp.w	r9, #0
 8002e14:	f1a5 0508 	sub.w	r5, r5, #8
 8002e18:	dc77      	bgt.n	8002f0a <__kernel_rem_pio2+0x202>
 8002e1a:	ec47 6b10 	vmov	d0, r6, r7
 8002e1e:	4650      	mov	r0, sl
 8002e20:	f000 fc0a 	bl	8003638 <scalbn>
 8002e24:	ec57 6b10 	vmov	r6, r7, d0
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002e2e:	ee10 0a10 	vmov	r0, s0
 8002e32:	4639      	mov	r1, r7
 8002e34:	f7fd fba4 	bl	8000580 <__aeabi_dmul>
 8002e38:	ec41 0b10 	vmov	d0, r0, r1
 8002e3c:	f000 fb7c 	bl	8003538 <floor>
 8002e40:	4b7c      	ldr	r3, [pc, #496]	; (8003034 <__kernel_rem_pio2+0x32c>)
 8002e42:	ec51 0b10 	vmov	r0, r1, d0
 8002e46:	2200      	movs	r2, #0
 8002e48:	f7fd fb9a 	bl	8000580 <__aeabi_dmul>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4630      	mov	r0, r6
 8002e52:	4639      	mov	r1, r7
 8002e54:	f7fd f9dc 	bl	8000210 <__aeabi_dsub>
 8002e58:	460f      	mov	r7, r1
 8002e5a:	4606      	mov	r6, r0
 8002e5c:	f7fd fe2a 	bl	8000ab4 <__aeabi_d2iz>
 8002e60:	9004      	str	r0, [sp, #16]
 8002e62:	f7fd fb23 	bl	80004ac <__aeabi_i2d>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	4639      	mov	r1, r7
 8002e6e:	f7fd f9cf 	bl	8000210 <__aeabi_dsub>
 8002e72:	f1ba 0f00 	cmp.w	sl, #0
 8002e76:	4606      	mov	r6, r0
 8002e78:	460f      	mov	r7, r1
 8002e7a:	dd6d      	ble.n	8002f58 <__kernel_rem_pio2+0x250>
 8002e7c:	1e62      	subs	r2, r4, #1
 8002e7e:	ab0e      	add	r3, sp, #56	; 0x38
 8002e80:	9d04      	ldr	r5, [sp, #16]
 8002e82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002e86:	f1ca 0118 	rsb	r1, sl, #24
 8002e8a:	fa40 f301 	asr.w	r3, r0, r1
 8002e8e:	441d      	add	r5, r3
 8002e90:	408b      	lsls	r3, r1
 8002e92:	1ac0      	subs	r0, r0, r3
 8002e94:	ab0e      	add	r3, sp, #56	; 0x38
 8002e96:	9504      	str	r5, [sp, #16]
 8002e98:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002e9c:	f1ca 0317 	rsb	r3, sl, #23
 8002ea0:	fa40 fb03 	asr.w	fp, r0, r3
 8002ea4:	f1bb 0f00 	cmp.w	fp, #0
 8002ea8:	dd65      	ble.n	8002f76 <__kernel_rem_pio2+0x26e>
 8002eaa:	9b04      	ldr	r3, [sp, #16]
 8002eac:	2200      	movs	r2, #0
 8002eae:	3301      	adds	r3, #1
 8002eb0:	9304      	str	r3, [sp, #16]
 8002eb2:	4615      	mov	r5, r2
 8002eb4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002eb8:	4294      	cmp	r4, r2
 8002eba:	f300 809c 	bgt.w	8002ff6 <__kernel_rem_pio2+0x2ee>
 8002ebe:	f1ba 0f00 	cmp.w	sl, #0
 8002ec2:	dd07      	ble.n	8002ed4 <__kernel_rem_pio2+0x1cc>
 8002ec4:	f1ba 0f01 	cmp.w	sl, #1
 8002ec8:	f000 80c0 	beq.w	800304c <__kernel_rem_pio2+0x344>
 8002ecc:	f1ba 0f02 	cmp.w	sl, #2
 8002ed0:	f000 80c6 	beq.w	8003060 <__kernel_rem_pio2+0x358>
 8002ed4:	f1bb 0f02 	cmp.w	fp, #2
 8002ed8:	d14d      	bne.n	8002f76 <__kernel_rem_pio2+0x26e>
 8002eda:	4632      	mov	r2, r6
 8002edc:	463b      	mov	r3, r7
 8002ede:	4956      	ldr	r1, [pc, #344]	; (8003038 <__kernel_rem_pio2+0x330>)
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7fd f995 	bl	8000210 <__aeabi_dsub>
 8002ee6:	4606      	mov	r6, r0
 8002ee8:	460f      	mov	r7, r1
 8002eea:	2d00      	cmp	r5, #0
 8002eec:	d043      	beq.n	8002f76 <__kernel_rem_pio2+0x26e>
 8002eee:	4650      	mov	r0, sl
 8002ef0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8003028 <__kernel_rem_pio2+0x320>
 8002ef4:	f000 fba0 	bl	8003638 <scalbn>
 8002ef8:	4630      	mov	r0, r6
 8002efa:	4639      	mov	r1, r7
 8002efc:	ec53 2b10 	vmov	r2, r3, d0
 8002f00:	f7fd f986 	bl	8000210 <__aeabi_dsub>
 8002f04:	4606      	mov	r6, r0
 8002f06:	460f      	mov	r7, r1
 8002f08:	e035      	b.n	8002f76 <__kernel_rem_pio2+0x26e>
 8002f0a:	4b4c      	ldr	r3, [pc, #304]	; (800303c <__kernel_rem_pio2+0x334>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	4630      	mov	r0, r6
 8002f10:	4639      	mov	r1, r7
 8002f12:	f7fd fb35 	bl	8000580 <__aeabi_dmul>
 8002f16:	f7fd fdcd 	bl	8000ab4 <__aeabi_d2iz>
 8002f1a:	f7fd fac7 	bl	80004ac <__aeabi_i2d>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	ec43 2b18 	vmov	d8, r2, r3
 8002f26:	4b46      	ldr	r3, [pc, #280]	; (8003040 <__kernel_rem_pio2+0x338>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f7fd fb29 	bl	8000580 <__aeabi_dmul>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4630      	mov	r0, r6
 8002f34:	4639      	mov	r1, r7
 8002f36:	f7fd f96b 	bl	8000210 <__aeabi_dsub>
 8002f3a:	f7fd fdbb 	bl	8000ab4 <__aeabi_d2iz>
 8002f3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002f42:	f84b 0b04 	str.w	r0, [fp], #4
 8002f46:	ec51 0b18 	vmov	r0, r1, d8
 8002f4a:	f7fd f963 	bl	8000214 <__adddf3>
 8002f4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8002f52:	4606      	mov	r6, r0
 8002f54:	460f      	mov	r7, r1
 8002f56:	e75b      	b.n	8002e10 <__kernel_rem_pio2+0x108>
 8002f58:	d106      	bne.n	8002f68 <__kernel_rem_pio2+0x260>
 8002f5a:	1e63      	subs	r3, r4, #1
 8002f5c:	aa0e      	add	r2, sp, #56	; 0x38
 8002f5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f62:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8002f66:	e79d      	b.n	8002ea4 <__kernel_rem_pio2+0x19c>
 8002f68:	4b36      	ldr	r3, [pc, #216]	; (8003044 <__kernel_rem_pio2+0x33c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f7fd fd8e 	bl	8000a8c <__aeabi_dcmpge>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d13d      	bne.n	8002ff0 <__kernel_rem_pio2+0x2e8>
 8002f74:	4683      	mov	fp, r0
 8002f76:	2200      	movs	r2, #0
 8002f78:	2300      	movs	r3, #0
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	4639      	mov	r1, r7
 8002f7e:	f7fd fd67 	bl	8000a50 <__aeabi_dcmpeq>
 8002f82:	2800      	cmp	r0, #0
 8002f84:	f000 80c0 	beq.w	8003108 <__kernel_rem_pio2+0x400>
 8002f88:	1e65      	subs	r5, r4, #1
 8002f8a:	462b      	mov	r3, r5
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	9902      	ldr	r1, [sp, #8]
 8002f90:	428b      	cmp	r3, r1
 8002f92:	da6c      	bge.n	800306e <__kernel_rem_pio2+0x366>
 8002f94:	2a00      	cmp	r2, #0
 8002f96:	f000 8089 	beq.w	80030ac <__kernel_rem_pio2+0x3a4>
 8002f9a:	ab0e      	add	r3, sp, #56	; 0x38
 8002f9c:	f1aa 0a18 	sub.w	sl, sl, #24
 8002fa0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80ad 	beq.w	8003104 <__kernel_rem_pio2+0x3fc>
 8002faa:	4650      	mov	r0, sl
 8002fac:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8003028 <__kernel_rem_pio2+0x320>
 8002fb0:	f000 fb42 	bl	8003638 <scalbn>
 8002fb4:	ab9a      	add	r3, sp, #616	; 0x268
 8002fb6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002fba:	ec57 6b10 	vmov	r6, r7, d0
 8002fbe:	00ec      	lsls	r4, r5, #3
 8002fc0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8002fc4:	46aa      	mov	sl, r5
 8002fc6:	f1ba 0f00 	cmp.w	sl, #0
 8002fca:	f280 80d6 	bge.w	800317a <__kernel_rem_pio2+0x472>
 8002fce:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8003020 <__kernel_rem_pio2+0x318>
 8002fd2:	462e      	mov	r6, r5
 8002fd4:	2e00      	cmp	r6, #0
 8002fd6:	f2c0 8104 	blt.w	80031e2 <__kernel_rem_pio2+0x4da>
 8002fda:	ab72      	add	r3, sp, #456	; 0x1c8
 8002fdc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002fe0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8003048 <__kernel_rem_pio2+0x340>
 8002fe4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8002fe8:	f04f 0800 	mov.w	r8, #0
 8002fec:	1baf      	subs	r7, r5, r6
 8002fee:	e0ea      	b.n	80031c6 <__kernel_rem_pio2+0x4be>
 8002ff0:	f04f 0b02 	mov.w	fp, #2
 8002ff4:	e759      	b.n	8002eaa <__kernel_rem_pio2+0x1a2>
 8002ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8002ffa:	b955      	cbnz	r5, 8003012 <__kernel_rem_pio2+0x30a>
 8002ffc:	b123      	cbz	r3, 8003008 <__kernel_rem_pio2+0x300>
 8002ffe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003002:	f8c8 3000 	str.w	r3, [r8]
 8003006:	2301      	movs	r3, #1
 8003008:	3201      	adds	r2, #1
 800300a:	f108 0804 	add.w	r8, r8, #4
 800300e:	461d      	mov	r5, r3
 8003010:	e752      	b.n	8002eb8 <__kernel_rem_pio2+0x1b0>
 8003012:	1acb      	subs	r3, r1, r3
 8003014:	f8c8 3000 	str.w	r3, [r8]
 8003018:	462b      	mov	r3, r5
 800301a:	e7f5      	b.n	8003008 <__kernel_rem_pio2+0x300>
 800301c:	f3af 8000 	nop.w
	...
 800302c:	3ff00000 	.word	0x3ff00000
 8003030:	08003990 	.word	0x08003990
 8003034:	40200000 	.word	0x40200000
 8003038:	3ff00000 	.word	0x3ff00000
 800303c:	3e700000 	.word	0x3e700000
 8003040:	41700000 	.word	0x41700000
 8003044:	3fe00000 	.word	0x3fe00000
 8003048:	08003950 	.word	0x08003950
 800304c:	1e62      	subs	r2, r4, #1
 800304e:	ab0e      	add	r3, sp, #56	; 0x38
 8003050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003054:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003058:	a90e      	add	r1, sp, #56	; 0x38
 800305a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800305e:	e739      	b.n	8002ed4 <__kernel_rem_pio2+0x1cc>
 8003060:	1e62      	subs	r2, r4, #1
 8003062:	ab0e      	add	r3, sp, #56	; 0x38
 8003064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003068:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800306c:	e7f4      	b.n	8003058 <__kernel_rem_pio2+0x350>
 800306e:	a90e      	add	r1, sp, #56	; 0x38
 8003070:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003074:	3b01      	subs	r3, #1
 8003076:	430a      	orrs	r2, r1
 8003078:	e789      	b.n	8002f8e <__kernel_rem_pio2+0x286>
 800307a:	3301      	adds	r3, #1
 800307c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003080:	2900      	cmp	r1, #0
 8003082:	d0fa      	beq.n	800307a <__kernel_rem_pio2+0x372>
 8003084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003086:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800308a:	446a      	add	r2, sp
 800308c:	3a98      	subs	r2, #152	; 0x98
 800308e:	920a      	str	r2, [sp, #40]	; 0x28
 8003090:	9a08      	ldr	r2, [sp, #32]
 8003092:	18e3      	adds	r3, r4, r3
 8003094:	18a5      	adds	r5, r4, r2
 8003096:	aa22      	add	r2, sp, #136	; 0x88
 8003098:	f104 0801 	add.w	r8, r4, #1
 800309c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80030a0:	9304      	str	r3, [sp, #16]
 80030a2:	9b04      	ldr	r3, [sp, #16]
 80030a4:	4543      	cmp	r3, r8
 80030a6:	da04      	bge.n	80030b2 <__kernel_rem_pio2+0x3aa>
 80030a8:	461c      	mov	r4, r3
 80030aa:	e6a3      	b.n	8002df4 <__kernel_rem_pio2+0xec>
 80030ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80030ae:	2301      	movs	r3, #1
 80030b0:	e7e4      	b.n	800307c <__kernel_rem_pio2+0x374>
 80030b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80030b8:	f7fd f9f8 	bl	80004ac <__aeabi_i2d>
 80030bc:	e8e5 0102 	strd	r0, r1, [r5], #8
 80030c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030c2:	46ab      	mov	fp, r5
 80030c4:	461c      	mov	r4, r3
 80030c6:	f04f 0900 	mov.w	r9, #0
 80030ca:	2600      	movs	r6, #0
 80030cc:	2700      	movs	r7, #0
 80030ce:	9b06      	ldr	r3, [sp, #24]
 80030d0:	4599      	cmp	r9, r3
 80030d2:	dd06      	ble.n	80030e2 <__kernel_rem_pio2+0x3da>
 80030d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030d6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80030da:	f108 0801 	add.w	r8, r8, #1
 80030de:	930a      	str	r3, [sp, #40]	; 0x28
 80030e0:	e7df      	b.n	80030a2 <__kernel_rem_pio2+0x39a>
 80030e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80030e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80030ea:	f7fd fa49 	bl	8000580 <__aeabi_dmul>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4630      	mov	r0, r6
 80030f4:	4639      	mov	r1, r7
 80030f6:	f7fd f88d 	bl	8000214 <__adddf3>
 80030fa:	f109 0901 	add.w	r9, r9, #1
 80030fe:	4606      	mov	r6, r0
 8003100:	460f      	mov	r7, r1
 8003102:	e7e4      	b.n	80030ce <__kernel_rem_pio2+0x3c6>
 8003104:	3d01      	subs	r5, #1
 8003106:	e748      	b.n	8002f9a <__kernel_rem_pio2+0x292>
 8003108:	ec47 6b10 	vmov	d0, r6, r7
 800310c:	f1ca 0000 	rsb	r0, sl, #0
 8003110:	f000 fa92 	bl	8003638 <scalbn>
 8003114:	ec57 6b10 	vmov	r6, r7, d0
 8003118:	4ba0      	ldr	r3, [pc, #640]	; (800339c <__kernel_rem_pio2+0x694>)
 800311a:	ee10 0a10 	vmov	r0, s0
 800311e:	2200      	movs	r2, #0
 8003120:	4639      	mov	r1, r7
 8003122:	f7fd fcb3 	bl	8000a8c <__aeabi_dcmpge>
 8003126:	b1f8      	cbz	r0, 8003168 <__kernel_rem_pio2+0x460>
 8003128:	4b9d      	ldr	r3, [pc, #628]	; (80033a0 <__kernel_rem_pio2+0x698>)
 800312a:	2200      	movs	r2, #0
 800312c:	4630      	mov	r0, r6
 800312e:	4639      	mov	r1, r7
 8003130:	f7fd fa26 	bl	8000580 <__aeabi_dmul>
 8003134:	f7fd fcbe 	bl	8000ab4 <__aeabi_d2iz>
 8003138:	4680      	mov	r8, r0
 800313a:	f7fd f9b7 	bl	80004ac <__aeabi_i2d>
 800313e:	4b97      	ldr	r3, [pc, #604]	; (800339c <__kernel_rem_pio2+0x694>)
 8003140:	2200      	movs	r2, #0
 8003142:	f7fd fa1d 	bl	8000580 <__aeabi_dmul>
 8003146:	460b      	mov	r3, r1
 8003148:	4602      	mov	r2, r0
 800314a:	4639      	mov	r1, r7
 800314c:	4630      	mov	r0, r6
 800314e:	f7fd f85f 	bl	8000210 <__aeabi_dsub>
 8003152:	f7fd fcaf 	bl	8000ab4 <__aeabi_d2iz>
 8003156:	1c65      	adds	r5, r4, #1
 8003158:	ab0e      	add	r3, sp, #56	; 0x38
 800315a:	f10a 0a18 	add.w	sl, sl, #24
 800315e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003162:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003166:	e720      	b.n	8002faa <__kernel_rem_pio2+0x2a2>
 8003168:	4630      	mov	r0, r6
 800316a:	4639      	mov	r1, r7
 800316c:	f7fd fca2 	bl	8000ab4 <__aeabi_d2iz>
 8003170:	ab0e      	add	r3, sp, #56	; 0x38
 8003172:	4625      	mov	r5, r4
 8003174:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003178:	e717      	b.n	8002faa <__kernel_rem_pio2+0x2a2>
 800317a:	ab0e      	add	r3, sp, #56	; 0x38
 800317c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003180:	f7fd f994 	bl	80004ac <__aeabi_i2d>
 8003184:	4632      	mov	r2, r6
 8003186:	463b      	mov	r3, r7
 8003188:	f7fd f9fa 	bl	8000580 <__aeabi_dmul>
 800318c:	4b84      	ldr	r3, [pc, #528]	; (80033a0 <__kernel_rem_pio2+0x698>)
 800318e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8003192:	2200      	movs	r2, #0
 8003194:	4630      	mov	r0, r6
 8003196:	4639      	mov	r1, r7
 8003198:	f7fd f9f2 	bl	8000580 <__aeabi_dmul>
 800319c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80031a0:	4606      	mov	r6, r0
 80031a2:	460f      	mov	r7, r1
 80031a4:	e70f      	b.n	8002fc6 <__kernel_rem_pio2+0x2be>
 80031a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80031aa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80031ae:	f7fd f9e7 	bl	8000580 <__aeabi_dmul>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031ba:	f7fd f82b 	bl	8000214 <__adddf3>
 80031be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80031c2:	f108 0801 	add.w	r8, r8, #1
 80031c6:	9b02      	ldr	r3, [sp, #8]
 80031c8:	4598      	cmp	r8, r3
 80031ca:	dc01      	bgt.n	80031d0 <__kernel_rem_pio2+0x4c8>
 80031cc:	45b8      	cmp	r8, r7
 80031ce:	ddea      	ble.n	80031a6 <__kernel_rem_pio2+0x49e>
 80031d0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80031d4:	ab4a      	add	r3, sp, #296	; 0x128
 80031d6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80031da:	ed87 7b00 	vstr	d7, [r7]
 80031de:	3e01      	subs	r6, #1
 80031e0:	e6f8      	b.n	8002fd4 <__kernel_rem_pio2+0x2cc>
 80031e2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	dc0b      	bgt.n	8003200 <__kernel_rem_pio2+0x4f8>
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	dc35      	bgt.n	8003258 <__kernel_rem_pio2+0x550>
 80031ec:	d059      	beq.n	80032a2 <__kernel_rem_pio2+0x59a>
 80031ee:	9b04      	ldr	r3, [sp, #16]
 80031f0:	f003 0007 	and.w	r0, r3, #7
 80031f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80031f8:	ecbd 8b02 	vpop	{d8}
 80031fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003200:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8003202:	2b03      	cmp	r3, #3
 8003204:	d1f3      	bne.n	80031ee <__kernel_rem_pio2+0x4e6>
 8003206:	ab4a      	add	r3, sp, #296	; 0x128
 8003208:	4423      	add	r3, r4
 800320a:	9306      	str	r3, [sp, #24]
 800320c:	461c      	mov	r4, r3
 800320e:	469a      	mov	sl, r3
 8003210:	9502      	str	r5, [sp, #8]
 8003212:	9b02      	ldr	r3, [sp, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f1aa 0a08 	sub.w	sl, sl, #8
 800321a:	dc6b      	bgt.n	80032f4 <__kernel_rem_pio2+0x5ec>
 800321c:	46aa      	mov	sl, r5
 800321e:	f1ba 0f01 	cmp.w	sl, #1
 8003222:	f1a4 0408 	sub.w	r4, r4, #8
 8003226:	f300 8085 	bgt.w	8003334 <__kernel_rem_pio2+0x62c>
 800322a:	9c06      	ldr	r4, [sp, #24]
 800322c:	2000      	movs	r0, #0
 800322e:	3408      	adds	r4, #8
 8003230:	2100      	movs	r1, #0
 8003232:	2d01      	cmp	r5, #1
 8003234:	f300 809d 	bgt.w	8003372 <__kernel_rem_pio2+0x66a>
 8003238:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800323c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8003240:	f1bb 0f00 	cmp.w	fp, #0
 8003244:	f040 809b 	bne.w	800337e <__kernel_rem_pio2+0x676>
 8003248:	9b01      	ldr	r3, [sp, #4]
 800324a:	e9c3 5600 	strd	r5, r6, [r3]
 800324e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8003252:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003256:	e7ca      	b.n	80031ee <__kernel_rem_pio2+0x4e6>
 8003258:	3408      	adds	r4, #8
 800325a:	ab4a      	add	r3, sp, #296	; 0x128
 800325c:	441c      	add	r4, r3
 800325e:	462e      	mov	r6, r5
 8003260:	2000      	movs	r0, #0
 8003262:	2100      	movs	r1, #0
 8003264:	2e00      	cmp	r6, #0
 8003266:	da36      	bge.n	80032d6 <__kernel_rem_pio2+0x5ce>
 8003268:	f1bb 0f00 	cmp.w	fp, #0
 800326c:	d039      	beq.n	80032e2 <__kernel_rem_pio2+0x5da>
 800326e:	4602      	mov	r2, r0
 8003270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003274:	9c01      	ldr	r4, [sp, #4]
 8003276:	e9c4 2300 	strd	r2, r3, [r4]
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8003282:	f7fc ffc5 	bl	8000210 <__aeabi_dsub>
 8003286:	ae4c      	add	r6, sp, #304	; 0x130
 8003288:	2401      	movs	r4, #1
 800328a:	42a5      	cmp	r5, r4
 800328c:	da2c      	bge.n	80032e8 <__kernel_rem_pio2+0x5e0>
 800328e:	f1bb 0f00 	cmp.w	fp, #0
 8003292:	d002      	beq.n	800329a <__kernel_rem_pio2+0x592>
 8003294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003298:	4619      	mov	r1, r3
 800329a:	9b01      	ldr	r3, [sp, #4]
 800329c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80032a0:	e7a5      	b.n	80031ee <__kernel_rem_pio2+0x4e6>
 80032a2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80032a6:	eb0d 0403 	add.w	r4, sp, r3
 80032aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80032ae:	2000      	movs	r0, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	2d00      	cmp	r5, #0
 80032b4:	da09      	bge.n	80032ca <__kernel_rem_pio2+0x5c2>
 80032b6:	f1bb 0f00 	cmp.w	fp, #0
 80032ba:	d002      	beq.n	80032c2 <__kernel_rem_pio2+0x5ba>
 80032bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80032c0:	4619      	mov	r1, r3
 80032c2:	9b01      	ldr	r3, [sp, #4]
 80032c4:	e9c3 0100 	strd	r0, r1, [r3]
 80032c8:	e791      	b.n	80031ee <__kernel_rem_pio2+0x4e6>
 80032ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80032ce:	f7fc ffa1 	bl	8000214 <__adddf3>
 80032d2:	3d01      	subs	r5, #1
 80032d4:	e7ed      	b.n	80032b2 <__kernel_rem_pio2+0x5aa>
 80032d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80032da:	f7fc ff9b 	bl	8000214 <__adddf3>
 80032de:	3e01      	subs	r6, #1
 80032e0:	e7c0      	b.n	8003264 <__kernel_rem_pio2+0x55c>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	e7c5      	b.n	8003274 <__kernel_rem_pio2+0x56c>
 80032e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80032ec:	f7fc ff92 	bl	8000214 <__adddf3>
 80032f0:	3401      	adds	r4, #1
 80032f2:	e7ca      	b.n	800328a <__kernel_rem_pio2+0x582>
 80032f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80032f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80032fc:	9b02      	ldr	r3, [sp, #8]
 80032fe:	3b01      	subs	r3, #1
 8003300:	9302      	str	r3, [sp, #8]
 8003302:	4632      	mov	r2, r6
 8003304:	463b      	mov	r3, r7
 8003306:	4640      	mov	r0, r8
 8003308:	4649      	mov	r1, r9
 800330a:	f7fc ff83 	bl	8000214 <__adddf3>
 800330e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4640      	mov	r0, r8
 8003318:	4649      	mov	r1, r9
 800331a:	f7fc ff79 	bl	8000210 <__aeabi_dsub>
 800331e:	4632      	mov	r2, r6
 8003320:	463b      	mov	r3, r7
 8003322:	f7fc ff77 	bl	8000214 <__adddf3>
 8003326:	ed9d 7b08 	vldr	d7, [sp, #32]
 800332a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800332e:	ed8a 7b00 	vstr	d7, [sl]
 8003332:	e76e      	b.n	8003212 <__kernel_rem_pio2+0x50a>
 8003334:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003338:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800333c:	4640      	mov	r0, r8
 800333e:	4632      	mov	r2, r6
 8003340:	463b      	mov	r3, r7
 8003342:	4649      	mov	r1, r9
 8003344:	f7fc ff66 	bl	8000214 <__adddf3>
 8003348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4640      	mov	r0, r8
 8003352:	4649      	mov	r1, r9
 8003354:	f7fc ff5c 	bl	8000210 <__aeabi_dsub>
 8003358:	4632      	mov	r2, r6
 800335a:	463b      	mov	r3, r7
 800335c:	f7fc ff5a 	bl	8000214 <__adddf3>
 8003360:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003364:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003368:	ed84 7b00 	vstr	d7, [r4]
 800336c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003370:	e755      	b.n	800321e <__kernel_rem_pio2+0x516>
 8003372:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003376:	f7fc ff4d 	bl	8000214 <__adddf3>
 800337a:	3d01      	subs	r5, #1
 800337c:	e759      	b.n	8003232 <__kernel_rem_pio2+0x52a>
 800337e:	9b01      	ldr	r3, [sp, #4]
 8003380:	9a01      	ldr	r2, [sp, #4]
 8003382:	601d      	str	r5, [r3, #0]
 8003384:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8003388:	605c      	str	r4, [r3, #4]
 800338a:	609f      	str	r7, [r3, #8]
 800338c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8003390:	60d3      	str	r3, [r2, #12]
 8003392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003396:	6110      	str	r0, [r2, #16]
 8003398:	6153      	str	r3, [r2, #20]
 800339a:	e728      	b.n	80031ee <__kernel_rem_pio2+0x4e6>
 800339c:	41700000 	.word	0x41700000
 80033a0:	3e700000 	.word	0x3e700000
 80033a4:	00000000 	.word	0x00000000

080033a8 <__kernel_sin>:
 80033a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ac:	ed2d 8b04 	vpush	{d8-d9}
 80033b0:	eeb0 8a41 	vmov.f32	s16, s2
 80033b4:	eef0 8a61 	vmov.f32	s17, s3
 80033b8:	ec55 4b10 	vmov	r4, r5, d0
 80033bc:	b083      	sub	sp, #12
 80033be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80033c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80033c6:	9001      	str	r0, [sp, #4]
 80033c8:	da06      	bge.n	80033d8 <__kernel_sin+0x30>
 80033ca:	ee10 0a10 	vmov	r0, s0
 80033ce:	4629      	mov	r1, r5
 80033d0:	f7fd fb70 	bl	8000ab4 <__aeabi_d2iz>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d051      	beq.n	800347c <__kernel_sin+0xd4>
 80033d8:	4622      	mov	r2, r4
 80033da:	462b      	mov	r3, r5
 80033dc:	4620      	mov	r0, r4
 80033de:	4629      	mov	r1, r5
 80033e0:	f7fd f8ce 	bl	8000580 <__aeabi_dmul>
 80033e4:	4682      	mov	sl, r0
 80033e6:	468b      	mov	fp, r1
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4620      	mov	r0, r4
 80033ee:	4629      	mov	r1, r5
 80033f0:	f7fd f8c6 	bl	8000580 <__aeabi_dmul>
 80033f4:	a341      	add	r3, pc, #260	; (adr r3, 80034fc <__kernel_sin+0x154>)
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	4680      	mov	r8, r0
 80033fc:	4689      	mov	r9, r1
 80033fe:	4650      	mov	r0, sl
 8003400:	4659      	mov	r1, fp
 8003402:	f7fd f8bd 	bl	8000580 <__aeabi_dmul>
 8003406:	a33f      	add	r3, pc, #252	; (adr r3, 8003504 <__kernel_sin+0x15c>)
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f7fc ff00 	bl	8000210 <__aeabi_dsub>
 8003410:	4652      	mov	r2, sl
 8003412:	465b      	mov	r3, fp
 8003414:	f7fd f8b4 	bl	8000580 <__aeabi_dmul>
 8003418:	a33c      	add	r3, pc, #240	; (adr r3, 800350c <__kernel_sin+0x164>)
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	f7fc fef9 	bl	8000214 <__adddf3>
 8003422:	4652      	mov	r2, sl
 8003424:	465b      	mov	r3, fp
 8003426:	f7fd f8ab 	bl	8000580 <__aeabi_dmul>
 800342a:	a33a      	add	r3, pc, #232	; (adr r3, 8003514 <__kernel_sin+0x16c>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f7fc feee 	bl	8000210 <__aeabi_dsub>
 8003434:	4652      	mov	r2, sl
 8003436:	465b      	mov	r3, fp
 8003438:	f7fd f8a2 	bl	8000580 <__aeabi_dmul>
 800343c:	a337      	add	r3, pc, #220	; (adr r3, 800351c <__kernel_sin+0x174>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f7fc fee7 	bl	8000214 <__adddf3>
 8003446:	9b01      	ldr	r3, [sp, #4]
 8003448:	4606      	mov	r6, r0
 800344a:	460f      	mov	r7, r1
 800344c:	b9eb      	cbnz	r3, 800348a <__kernel_sin+0xe2>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4650      	mov	r0, sl
 8003454:	4659      	mov	r1, fp
 8003456:	f7fd f893 	bl	8000580 <__aeabi_dmul>
 800345a:	a325      	add	r3, pc, #148	; (adr r3, 80034f0 <__kernel_sin+0x148>)
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f7fc fed6 	bl	8000210 <__aeabi_dsub>
 8003464:	4642      	mov	r2, r8
 8003466:	464b      	mov	r3, r9
 8003468:	f7fd f88a 	bl	8000580 <__aeabi_dmul>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4620      	mov	r0, r4
 8003472:	4629      	mov	r1, r5
 8003474:	f7fc fece 	bl	8000214 <__adddf3>
 8003478:	4604      	mov	r4, r0
 800347a:	460d      	mov	r5, r1
 800347c:	ec45 4b10 	vmov	d0, r4, r5
 8003480:	b003      	add	sp, #12
 8003482:	ecbd 8b04 	vpop	{d8-d9}
 8003486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <__kernel_sin+0x150>)
 800348c:	ec51 0b18 	vmov	r0, r1, d8
 8003490:	2200      	movs	r2, #0
 8003492:	f7fd f875 	bl	8000580 <__aeabi_dmul>
 8003496:	4632      	mov	r2, r6
 8003498:	ec41 0b19 	vmov	d9, r0, r1
 800349c:	463b      	mov	r3, r7
 800349e:	4640      	mov	r0, r8
 80034a0:	4649      	mov	r1, r9
 80034a2:	f7fd f86d 	bl	8000580 <__aeabi_dmul>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	ec51 0b19 	vmov	r0, r1, d9
 80034ae:	f7fc feaf 	bl	8000210 <__aeabi_dsub>
 80034b2:	4652      	mov	r2, sl
 80034b4:	465b      	mov	r3, fp
 80034b6:	f7fd f863 	bl	8000580 <__aeabi_dmul>
 80034ba:	ec53 2b18 	vmov	r2, r3, d8
 80034be:	f7fc fea7 	bl	8000210 <__aeabi_dsub>
 80034c2:	a30b      	add	r3, pc, #44	; (adr r3, 80034f0 <__kernel_sin+0x148>)
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	4606      	mov	r6, r0
 80034ca:	460f      	mov	r7, r1
 80034cc:	4640      	mov	r0, r8
 80034ce:	4649      	mov	r1, r9
 80034d0:	f7fd f856 	bl	8000580 <__aeabi_dmul>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4630      	mov	r0, r6
 80034da:	4639      	mov	r1, r7
 80034dc:	f7fc fe9a 	bl	8000214 <__adddf3>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4620      	mov	r0, r4
 80034e6:	4629      	mov	r1, r5
 80034e8:	f7fc fe92 	bl	8000210 <__aeabi_dsub>
 80034ec:	e7c4      	b.n	8003478 <__kernel_sin+0xd0>
 80034ee:	bf00      	nop
 80034f0:	55555549 	.word	0x55555549
 80034f4:	3fc55555 	.word	0x3fc55555
 80034f8:	3fe00000 	.word	0x3fe00000
 80034fc:	5acfd57c 	.word	0x5acfd57c
 8003500:	3de5d93a 	.word	0x3de5d93a
 8003504:	8a2b9ceb 	.word	0x8a2b9ceb
 8003508:	3e5ae5e6 	.word	0x3e5ae5e6
 800350c:	57b1fe7d 	.word	0x57b1fe7d
 8003510:	3ec71de3 	.word	0x3ec71de3
 8003514:	19c161d5 	.word	0x19c161d5
 8003518:	3f2a01a0 	.word	0x3f2a01a0
 800351c:	1110f8a6 	.word	0x1110f8a6
 8003520:	3f811111 	.word	0x3f811111

08003524 <fabs>:
 8003524:	ec51 0b10 	vmov	r0, r1, d0
 8003528:	ee10 2a10 	vmov	r2, s0
 800352c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003530:	ec43 2b10 	vmov	d0, r2, r3
 8003534:	4770      	bx	lr
	...

08003538 <floor>:
 8003538:	ec51 0b10 	vmov	r0, r1, d0
 800353c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003540:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003544:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003548:	2e13      	cmp	r6, #19
 800354a:	ee10 5a10 	vmov	r5, s0
 800354e:	ee10 8a10 	vmov	r8, s0
 8003552:	460c      	mov	r4, r1
 8003554:	dc32      	bgt.n	80035bc <floor+0x84>
 8003556:	2e00      	cmp	r6, #0
 8003558:	da14      	bge.n	8003584 <floor+0x4c>
 800355a:	a333      	add	r3, pc, #204	; (adr r3, 8003628 <floor+0xf0>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f7fc fe58 	bl	8000214 <__adddf3>
 8003564:	2200      	movs	r2, #0
 8003566:	2300      	movs	r3, #0
 8003568:	f7fd fa9a 	bl	8000aa0 <__aeabi_dcmpgt>
 800356c:	b138      	cbz	r0, 800357e <floor+0x46>
 800356e:	2c00      	cmp	r4, #0
 8003570:	da57      	bge.n	8003622 <floor+0xea>
 8003572:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003576:	431d      	orrs	r5, r3
 8003578:	d001      	beq.n	800357e <floor+0x46>
 800357a:	4c2d      	ldr	r4, [pc, #180]	; (8003630 <floor+0xf8>)
 800357c:	2500      	movs	r5, #0
 800357e:	4621      	mov	r1, r4
 8003580:	4628      	mov	r0, r5
 8003582:	e025      	b.n	80035d0 <floor+0x98>
 8003584:	4f2b      	ldr	r7, [pc, #172]	; (8003634 <floor+0xfc>)
 8003586:	4137      	asrs	r7, r6
 8003588:	ea01 0307 	and.w	r3, r1, r7
 800358c:	4303      	orrs	r3, r0
 800358e:	d01f      	beq.n	80035d0 <floor+0x98>
 8003590:	a325      	add	r3, pc, #148	; (adr r3, 8003628 <floor+0xf0>)
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f7fc fe3d 	bl	8000214 <__adddf3>
 800359a:	2200      	movs	r2, #0
 800359c:	2300      	movs	r3, #0
 800359e:	f7fd fa7f 	bl	8000aa0 <__aeabi_dcmpgt>
 80035a2:	2800      	cmp	r0, #0
 80035a4:	d0eb      	beq.n	800357e <floor+0x46>
 80035a6:	2c00      	cmp	r4, #0
 80035a8:	bfbe      	ittt	lt
 80035aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80035ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80035b2:	19a4      	addlt	r4, r4, r6
 80035b4:	ea24 0407 	bic.w	r4, r4, r7
 80035b8:	2500      	movs	r5, #0
 80035ba:	e7e0      	b.n	800357e <floor+0x46>
 80035bc:	2e33      	cmp	r6, #51	; 0x33
 80035be:	dd0b      	ble.n	80035d8 <floor+0xa0>
 80035c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80035c4:	d104      	bne.n	80035d0 <floor+0x98>
 80035c6:	ee10 2a10 	vmov	r2, s0
 80035ca:	460b      	mov	r3, r1
 80035cc:	f7fc fe22 	bl	8000214 <__adddf3>
 80035d0:	ec41 0b10 	vmov	d0, r0, r1
 80035d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80035dc:	f04f 33ff 	mov.w	r3, #4294967295
 80035e0:	fa23 f707 	lsr.w	r7, r3, r7
 80035e4:	4207      	tst	r7, r0
 80035e6:	d0f3      	beq.n	80035d0 <floor+0x98>
 80035e8:	a30f      	add	r3, pc, #60	; (adr r3, 8003628 <floor+0xf0>)
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f7fc fe11 	bl	8000214 <__adddf3>
 80035f2:	2200      	movs	r2, #0
 80035f4:	2300      	movs	r3, #0
 80035f6:	f7fd fa53 	bl	8000aa0 <__aeabi_dcmpgt>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d0bf      	beq.n	800357e <floor+0x46>
 80035fe:	2c00      	cmp	r4, #0
 8003600:	da02      	bge.n	8003608 <floor+0xd0>
 8003602:	2e14      	cmp	r6, #20
 8003604:	d103      	bne.n	800360e <floor+0xd6>
 8003606:	3401      	adds	r4, #1
 8003608:	ea25 0507 	bic.w	r5, r5, r7
 800360c:	e7b7      	b.n	800357e <floor+0x46>
 800360e:	2301      	movs	r3, #1
 8003610:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003614:	fa03 f606 	lsl.w	r6, r3, r6
 8003618:	4435      	add	r5, r6
 800361a:	4545      	cmp	r5, r8
 800361c:	bf38      	it	cc
 800361e:	18e4      	addcc	r4, r4, r3
 8003620:	e7f2      	b.n	8003608 <floor+0xd0>
 8003622:	2500      	movs	r5, #0
 8003624:	462c      	mov	r4, r5
 8003626:	e7aa      	b.n	800357e <floor+0x46>
 8003628:	8800759c 	.word	0x8800759c
 800362c:	7e37e43c 	.word	0x7e37e43c
 8003630:	bff00000 	.word	0xbff00000
 8003634:	000fffff 	.word	0x000fffff

08003638 <scalbn>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	ec55 4b10 	vmov	r4, r5, d0
 800363e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003642:	4606      	mov	r6, r0
 8003644:	462b      	mov	r3, r5
 8003646:	b99a      	cbnz	r2, 8003670 <scalbn+0x38>
 8003648:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800364c:	4323      	orrs	r3, r4
 800364e:	d036      	beq.n	80036be <scalbn+0x86>
 8003650:	4b39      	ldr	r3, [pc, #228]	; (8003738 <scalbn+0x100>)
 8003652:	4629      	mov	r1, r5
 8003654:	ee10 0a10 	vmov	r0, s0
 8003658:	2200      	movs	r2, #0
 800365a:	f7fc ff91 	bl	8000580 <__aeabi_dmul>
 800365e:	4b37      	ldr	r3, [pc, #220]	; (800373c <scalbn+0x104>)
 8003660:	429e      	cmp	r6, r3
 8003662:	4604      	mov	r4, r0
 8003664:	460d      	mov	r5, r1
 8003666:	da10      	bge.n	800368a <scalbn+0x52>
 8003668:	a32b      	add	r3, pc, #172	; (adr r3, 8003718 <scalbn+0xe0>)
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	e03a      	b.n	80036e6 <scalbn+0xae>
 8003670:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003674:	428a      	cmp	r2, r1
 8003676:	d10c      	bne.n	8003692 <scalbn+0x5a>
 8003678:	ee10 2a10 	vmov	r2, s0
 800367c:	4620      	mov	r0, r4
 800367e:	4629      	mov	r1, r5
 8003680:	f7fc fdc8 	bl	8000214 <__adddf3>
 8003684:	4604      	mov	r4, r0
 8003686:	460d      	mov	r5, r1
 8003688:	e019      	b.n	80036be <scalbn+0x86>
 800368a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800368e:	460b      	mov	r3, r1
 8003690:	3a36      	subs	r2, #54	; 0x36
 8003692:	4432      	add	r2, r6
 8003694:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003698:	428a      	cmp	r2, r1
 800369a:	dd08      	ble.n	80036ae <scalbn+0x76>
 800369c:	2d00      	cmp	r5, #0
 800369e:	a120      	add	r1, pc, #128	; (adr r1, 8003720 <scalbn+0xe8>)
 80036a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036a4:	da1c      	bge.n	80036e0 <scalbn+0xa8>
 80036a6:	a120      	add	r1, pc, #128	; (adr r1, 8003728 <scalbn+0xf0>)
 80036a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036ac:	e018      	b.n	80036e0 <scalbn+0xa8>
 80036ae:	2a00      	cmp	r2, #0
 80036b0:	dd08      	ble.n	80036c4 <scalbn+0x8c>
 80036b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80036b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80036ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80036be:	ec45 4b10 	vmov	d0, r4, r5
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
 80036c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80036c8:	da19      	bge.n	80036fe <scalbn+0xc6>
 80036ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80036ce:	429e      	cmp	r6, r3
 80036d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80036d4:	dd0a      	ble.n	80036ec <scalbn+0xb4>
 80036d6:	a112      	add	r1, pc, #72	; (adr r1, 8003720 <scalbn+0xe8>)
 80036d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e2      	bne.n	80036a6 <scalbn+0x6e>
 80036e0:	a30f      	add	r3, pc, #60	; (adr r3, 8003720 <scalbn+0xe8>)
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	f7fc ff4b 	bl	8000580 <__aeabi_dmul>
 80036ea:	e7cb      	b.n	8003684 <scalbn+0x4c>
 80036ec:	a10a      	add	r1, pc, #40	; (adr r1, 8003718 <scalbn+0xe0>)
 80036ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0b8      	beq.n	8003668 <scalbn+0x30>
 80036f6:	a10e      	add	r1, pc, #56	; (adr r1, 8003730 <scalbn+0xf8>)
 80036f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036fc:	e7b4      	b.n	8003668 <scalbn+0x30>
 80036fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003702:	3236      	adds	r2, #54	; 0x36
 8003704:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003708:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800370c:	4620      	mov	r0, r4
 800370e:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <scalbn+0x108>)
 8003710:	2200      	movs	r2, #0
 8003712:	e7e8      	b.n	80036e6 <scalbn+0xae>
 8003714:	f3af 8000 	nop.w
 8003718:	c2f8f359 	.word	0xc2f8f359
 800371c:	01a56e1f 	.word	0x01a56e1f
 8003720:	8800759c 	.word	0x8800759c
 8003724:	7e37e43c 	.word	0x7e37e43c
 8003728:	8800759c 	.word	0x8800759c
 800372c:	fe37e43c 	.word	0xfe37e43c
 8003730:	c2f8f359 	.word	0xc2f8f359
 8003734:	81a56e1f 	.word	0x81a56e1f
 8003738:	43500000 	.word	0x43500000
 800373c:	ffff3cb0 	.word	0xffff3cb0
 8003740:	3c900000 	.word	0x3c900000

08003744 <__libc_init_array>:
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	4d0d      	ldr	r5, [pc, #52]	; (800377c <__libc_init_array+0x38>)
 8003748:	4c0d      	ldr	r4, [pc, #52]	; (8003780 <__libc_init_array+0x3c>)
 800374a:	1b64      	subs	r4, r4, r5
 800374c:	10a4      	asrs	r4, r4, #2
 800374e:	2600      	movs	r6, #0
 8003750:	42a6      	cmp	r6, r4
 8003752:	d109      	bne.n	8003768 <__libc_init_array+0x24>
 8003754:	4d0b      	ldr	r5, [pc, #44]	; (8003784 <__libc_init_array+0x40>)
 8003756:	4c0c      	ldr	r4, [pc, #48]	; (8003788 <__libc_init_array+0x44>)
 8003758:	f000 f820 	bl	800379c <_init>
 800375c:	1b64      	subs	r4, r4, r5
 800375e:	10a4      	asrs	r4, r4, #2
 8003760:	2600      	movs	r6, #0
 8003762:	42a6      	cmp	r6, r4
 8003764:	d105      	bne.n	8003772 <__libc_init_array+0x2e>
 8003766:	bd70      	pop	{r4, r5, r6, pc}
 8003768:	f855 3b04 	ldr.w	r3, [r5], #4
 800376c:	4798      	blx	r3
 800376e:	3601      	adds	r6, #1
 8003770:	e7ee      	b.n	8003750 <__libc_init_array+0xc>
 8003772:	f855 3b04 	ldr.w	r3, [r5], #4
 8003776:	4798      	blx	r3
 8003778:	3601      	adds	r6, #1
 800377a:	e7f2      	b.n	8003762 <__libc_init_array+0x1e>
 800377c:	080039a8 	.word	0x080039a8
 8003780:	080039a8 	.word	0x080039a8
 8003784:	080039a8 	.word	0x080039a8
 8003788:	080039ac 	.word	0x080039ac

0800378c <memset>:
 800378c:	4402      	add	r2, r0
 800378e:	4603      	mov	r3, r0
 8003790:	4293      	cmp	r3, r2
 8003792:	d100      	bne.n	8003796 <memset+0xa>
 8003794:	4770      	bx	lr
 8003796:	f803 1b01 	strb.w	r1, [r3], #1
 800379a:	e7f9      	b.n	8003790 <memset+0x4>

0800379c <_init>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	bf00      	nop
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr

080037a8 <_fini>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	bf00      	nop
 80037ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ae:	bc08      	pop	{r3}
 80037b0:	469e      	mov	lr, r3
 80037b2:	4770      	bx	lr
